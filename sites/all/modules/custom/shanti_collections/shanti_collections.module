<?php
/**
 * @file
 * Code for the SHANTI Collections feature.
 */

include_once 'shanti_collections.features.inc';

/**
 * Implements hook_node_load
 *  - Add parent collection title to subcollection node in case the parent is private
 */
function shanti_collections_node_view($node, $view_mode, $langcode) {
    if ($node->type == 'subcollection' && $view_mode == 'full') {
        $parent = shanti_collections_get_parent_collection($node);
        $node->parent_coll_title = $parent->title;
    }
}

/**
 * Custom Code added by ndg8f (Nov. 12, 2016)
 * Add block with "Add Collection" button.
 */

function shanti_collections_block_info() {
    $blocks=array();
    $blocks['add_shanti_collection'] = array(
        'info' => 'Create a Collection Block',
        'visibility' => BLOCK_VISIBILITY_LISTED,
    );
   return $blocks;
}

/**
 * Implements hook_block_list_alter to remove block for non-authenticated users
 */
function shanti_collections_block_list_alter(&$blocks) {
    // see http://drupal.stackexchange.com/questions/69861/how-do-i-programmatically-assign-the-access-to-a-block
    if(!user_is_logged_in()) {
        foreach($blocks as $bid => $blk) {
            if ($blk->delta == "add_shanti_collection") {
                unset($blocks[$bid]);
                break;
            }
        }
    }
}

/**
 * Implements hook_block_view
 */
function shanti_collections_block_view($delta) {
    switch($delta) {
        case 'add_shanti_collection':
            return shanti_collections_add_collection_block();
            break;
    }
}

/**
 * Custom function to display the add collection block
 */
function shanti_collections_add_collection_block() {
    $block['subject'] = t('Create A Collection');
    $block['content'] = '<div><p>' . t('Create a new collection of resources grouped by project or theme:') . '</p>
            <a href="' . url('node/add/collection') . '">
                <button class="btn-block btn btn-primary btn-icon" value="Add New Collection">
                    <span class="icon shanticon-grid"></span>
                    <span>' . t('Add New Collection') . '</span></button>
        </div>';
    return $block;
}

/***********  NODE FUNCTIONS ********************/


/***********   UTILITY FUNCTIONS ******************/

/**
 * Get a node's collection
 */
function shanti_collections_get_collection($node) {
    if (is_numeric($node)) {$node = node_load($node); }
    if ($node && isset($node->field_og_collection_ref)) {
        $ew = entity_metadata_wrapper('node', $node);
        $coll = $ew->field_og_collection_ref->value();
        return $coll;
    } else {
        return FALSE;
    }
}

/**
 * Returns an array of Collection/Subcollection titles that a user can "update" or edit.
 * Returns either a single array of collections and subcollections or one broken into distinct subarrays for use in form options.
 * Taken from mb_structure.module ll. 1172
 * param $add_optgroup, whether to split the array into two parts: collection and subcollection or not.
 *
 * TODO: Implement the $type parameter so it will also return groups a person is 'member' of or can 'view'
 * TODO: Use mysql queries to determine user groups since neither node_access nor og_get_groups_by_user is comprehensive enough
 */
function shanti_collections_get_groups_for_user($type='update', $add_optgroup = TRUE)
{
    global $user;
    $gids_with_labels = array();
    $coll_key = t('Collections');
    $subcoll_key = t('Subcollections');
    // old: $gps = og_get_groups_by_user($user, 'node'); // only shows group user is explicitly a member of
    // but subcollections inhertit user permisions so a person can belong to a collection and be able to edit subcollections.
    // So need to filter by node_access see MANU-3976
    $res = db_query("SELECT nid FROM {node} WHERE type in ('collection', 'subcollection')")->fetchAll();
    $nids = array();
    foreach($res as $r) { $nids[] = $r->nid; }
    $allcolls = node_load_multiple($nids);
    // Get list of user groups to double check for access
    $ugroups = og_get_groups_by_user();
    if (isset($ugroups['node'])) { $ugroups = array_keys($ugroups['node']); } else { $ugroups = array(); }

    if (is_null($ugroups)) { $ugroups = array(); }
    $colls = array();
    $subcolls = array();
    
    foreach ($allcolls as $gp) {
        // Check if user has ability to do the $type action (defaults to "update")
        if (node_access($type, $gp) || in_array($gp->nid, $ugroups)) {
            if ($gp->type == "collection") {
                $colls[$gp->nid] = $gp->title;
            } else if ($gp->type == "subcollection") {
                $subcolls[$gp->nid] = $gp->title;
            }
        } 
    }
    
    if ($add_optgroup) {
        asort($colls);
        asort($subcolls);
        $gids_with_labels[$coll_key] = $colls;
        $gids_with_labels[$subcoll_key] = $subcolls;
    } else {
        $gids_with_labels = $colls + $subcolls;
        asort($gids_with_labels);
    }
    return $gids_with_labels;
}


/**
 * Get subcollections for a collection.
 * Moved from mb_structure's get_subcollections_in_collection() function,
 * As it naturally belongs here
 */
function shanti_collections_get_subcollections($coll = FALSE) {
  $nids = array();
  // convert nid to node
  if (is_numeric($coll)) {
    $coll = node_load($coll);
  }
  // If it's a collection, do query for nodes that have it's nid for og collection ref
  if ($coll->type == "collection") {
    $result = db_select('og_membership', 'ogm')
      ->fields('ogm', array('etid'))
      ->condition('entity_type', 'node')
      ->condition('field_name', 'field_og_parent_collection_ref')
      ->condition('gid', $coll->nid)
      ->execute();
    $nids = $result->fetchCol();
  }
  return $nids;
}

/**
 * Get a subcollection's parent node
 */
function shanti_collections_get_parent_collection($subcoll) {
    if (is_numeric($subcoll)) { $subcoll = node_load($subcoll); }
    if (!empty($subcoll->field_og_parent_collection_ref)) {
        $pid = $subcoll->field_og_parent_collection_ref['und'][0]['target_id'];
        $pnode = node_load($pid);
        if ($pnode) {
            return $pnode;
        }
    }
    return FALSE;
}

/**
 * Return the count of number of items in a collection or return a list of nids for items in the collection
 *
 * @param $coll : the collection node or node id
 * @param $return : "count" to return a number or "nids" to return a list of node ids
 * @param $sort : the sort parameters node "field name:order" (asc = default, desc), e.g. 'title:desc' or 'created'
 *
 * @return the count of nodes or the list of node ids
 */
function shanti_collections_get_items_in_collection($coll = FALSE, $return = "count", $sort = 'created', $include_subs = TRUE)
{
  $nids = array();
  if (is_numeric($coll)) {
    $coll = node_load($coll);
  } // Load collection node if id given
  if ($coll) {
    // Get all collection and subcollection nids invovled
    $nids[] = $coll->nid;

    if ($include_subs) {
        $nids = array_merge($nids, shanti_collections_get_subcollections($coll));
    }

    /**
     * Sample Query:
     *      select count(etid) from og_membership where entity_type='node' and field_name='field_og_collection_ref' and gid in (3,1721,1725,1769,2228,2258,3498,3939,4836,4835,1760,1748,1841);
     *
     */
    $query = db_select('og_membership', 'ogm');
    $query->join('node', 'n', 'n.nid = ogm.etid');
    $query->fields('ogm', array('etid'))
      ->condition('n.status', 1)
      ->condition('ogm.entity_type', 'node')
      ->condition('ogm.field_name', 'field_og_collection_ref')
      ->condition('ogm.gid', $nids, 'IN');

    // Add sort params if there
    if (!empty($sort)) {
        $pts = explode(':', $sort);
        $fieldnm = $pts[0];
        $order = (count($pts) > 1) ? $pts[1] : 'asc';
        $query->fields('n', array($fieldnm));
        $query->orderBy("n.". $fieldnm, $order);
    }

    // Perform the query and get and return results
    $result = $query->execute();
    $nids = $result->fetchCol();

    if ($return == "nids") {
      return $nids;
    }
  }
  return count($nids);
}

/***************** END UTILITY FUNCTIONS ********************/

/***************** Hook Alters *************************/
/**
 * Implements hook_form_alter for group nodes to add an "Add Members" link to the node edit form
 */
function shanti_collections_form_alter(&$form, &$form_state, $form_id) {
    if (strstr($form_id, '_node_form')) {
        // Only look at node forms for groups
        if (og_is_group_type('node', $form['#bundle'])) {
            // If it is an existing group node edit form, add link to add users directly to group
            if (!empty($form['nid']["#value"])) {
                $url = "/group/node/{$form['nid']["#value"]}/admin/people/add-user";
                $form['add_people_link'] = array(
                    '#markup' => '<div class="group-edit-member-nav add"><a href="' . $url .
                        '">' . t('Add Members') . '</a></div>',
                    '#weight' => -49,
                );
            }
        }
    } else if ($form_id == 'og_ui_add_users') {
        // Add back to group link from add user page
        $url = '/' . drupal_get_path_alias('node/' . $form['gid']["#value"]);
        $form['og_user']['name']['#prefix'] =  '<div class="group-edit-member-nav back"><a href="' . $url . '">' .
                                            t('Return to Collection Page') . '</a></div>';
    }
}

/**
 * Implements hook_admin_paths_alter().
 */
function shanti_collections_admin_paths_alter(&$paths)
{
    // Make the add members form a sarvaka styled page
    $paths['group/*/*/admin/*'] = FALSE;
}

/**
 * Implements field_widget_form_alter
 *      If options are broken down into "Collections" and "Subcollections" than it sorts both subarrays
 */
function shanti_collections_field_widget_form_alter(&$element, &$form_state, $context) {
    if (isset($element['#field_name']) && $element['#field_name'] == 'field_og_collection_ref') {
        if (!empty($element['#options']) && is_array($element['#options']["Collection"])) {
            asort($element['#options']["Collection"]);
        }
        if (!empty($element['#options']) && is_array($element['#options']["Subcollection"])) {
            asort($element['#options']["Subcollection"]);
        }
    }
}


/**
 * Alter the OG batch process called when group visibility is changed If kmaps fields is enabled
 * Go through and adjust kmasset index based on group visibility change
 *
 */

function shanti_collections_batch_alter(&$batch) {
    // If there are kmaps fields
    if (module_exists('shanti_kmaps_fields')) {
        // If the site setting has opted into indexing in kmassets index
        $opt_in = variable_get('shanti_kmaps_admin_server_solr_opt_in');
        // if the active batch is from OG group
        // TODO: This matches on the batch title because there is no other ID. Is there a better way?
        $active_batch = &$batch['sets'][0];
        // If this stops working, check to see if og_access.module function og_access_handle_group_privacy_change()
        // to see if title has changed
        if ($opt_in && $active_batch['title'] === t('Handle group privacy change')) {
            // Get Coll ID from OG batch object
            $collid = (!empty($active_batch['operations'][0][1][1])) ? $active_batch['operations'][0][1][1] : 'couldn\'t find coll id';
            if (is_numeric($collid)) {
                $coll = node_load($collid);
                // Get collection items but not subcollection items because
                // Subcollection item visibility is determined by the subcollection itself.
                $coll_items = shanti_collections_get_items_in_collection($coll, 'nids', 'created', FALSE);
                $scbatch = array(
                    'title' => t('Updating Solr Asset Index'),
                    'operations' => array(
                        array('shanti_collections_coll_items_access_update', array($coll_items)),
                    ),
                    'finished' => 'shanti_collections_coll_items_access_update_finished',
                    'progress_message' => t('Processed @current_index out of @max.'),
                    'error_message' => t('An error was encountered updating solr asset index'),
                );
                batch_set($scbatch);
            }
        }
    }
}

/**
 * Batch function to adjust solr index for individual nodes based on collection visibility change
 * @param $items
 * @param $access
 * @param $context
 */
function shanti_collections_coll_items_access_update($items, &$context) {
    // Set up the sandbox
    if (!isset($context['sandbox']['progress'])) {
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['current_index'] = 0;
        $context['sandbox']['max'] = count($items);
        $context['results']= array('indexed' => 0, 'unindexed' => 0);
    }
    $limit = 100; // Do 100 nodes at a time
    $nids = array_slice($items, $context['sandbox']['current_index'], $limit);
    $item_nodes = node_load_multiple($nids);
    foreach($item_nodes as $node) {
        // For each node use the shanti_kmaps function to index based on its setting
        $res = _shanti_kmaps_fields_index_node($node);
        if ($res) {
            $context['results']['indexed']++;
        } else {
            $context['results']['unindexed']++;
        }
        $context['sandbox']['current_index']++;
        $context['sandbox']['progress']++;
    }

    if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
        $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
}

function shanti_collections_coll_items_access_update_finished($success, $results, $operations) {
    _shanti_kmaps_fields_commit_solr_update();  // in case some records have been sent regardless
    if ($success) {
        $indct = $results['indexed'];
        $unind = $results['unindexed'];
        drupal_set_message("Successfully updated Solr Asset Index. $indct nodes indexed. $unind nodes removed.");
    } else {
        drupal_set_message("Could not update the Solr Asset Index upon collection change", 'warning');
    }
}

/**
 * Implements hook_node_access_records
 *     -  Only called on node_save
 *
 * @param $node          - The node being accessed
 * @return array $grants - The grants to return (if any)
 */
function shanti_collections_node_access_records_alter(&$grants, $node){
    // If it is a subcollection set to public (0) ...
    if ($node->type == 'subcollection' && $node->group_access['und'][0]['value'] == 0) {
        // If it's parent is private (1) ...
        $parent = shanti_collections_get_parent_collection($node);
        //dpm($parent, 'parent in node acces rec');
        if ($parent->group_access['und'][0]['value'] == 1) {
            //dpm($grants, 'grants for subcoll: ' . $node->nid . ": " . $node->title);
            $found = FALSE;
            foreach($grants as &$grant) {
                if ($grant['realm'] == 'all') {
                    $grant['gid'] = 0;
                    $grant['grant_view'] = 1;
                    $grant['grant_update'] = 0;
                    $grant['grant_delete'] = 0;
                    $grant['priority'] = 0;
                    $found = TRUE;
                    break;
                }
            }
            if (!$found) {
                // Grant access to anonymous users to view the subcollection
                $grants[] = array(
                    'realm' => 'all',  // All realms
                    'gid' => 0,        // Anonymous users
                    'grant_view' => 1, // View only
                    'grant_update' => 0,
                    'grant_delete' => 0,
                    'priority' => 0,
                );
            }
        }
    }
}
