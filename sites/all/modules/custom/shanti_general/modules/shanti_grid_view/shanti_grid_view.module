<?php
/**
 *  Shanti Grid View: A module that provides a view format and default view for a Google-like grid of images with popdowns.
 *
 *  includes/shanti_grid_view.views.inc : defines the view plugin along with options but
 *  most of the heavy lifting is done in the shanti_grid_view_views_pre_render(&$view) function
 *
 */
 
 /**
  * Implements hook_menu
  * 
  * Defines a path "shanti/grid/info/{type}/{eid}" for the callback function shanti_grid_view_item_info($type, $eid)
  * This path returns the info panel that appears next to the image in an image dropdown
  */
function shanti_grid_view_menu() {
    $items = array();
    $items['admin/config/user-interface/shanti_grid_view'] = array(
        'title' => 'Shanti Grid View',
        'description' => 'Configuration for Shanti Grid View module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('shanti_grid_view_admin_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
      );
      $items['shanti/grid/dinfo/%/%/%'] = array(
        'title' => '',
        'description' => 'Api path to return description of node for Shanti grid view for data sources',
        'page callback' => 'shanti_grid_view_data_item_info',
        'page arguments' => array(3, 4, 5),
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
      );
      $items['shanti/grid/info/%/%'] = array(
        'title' => '',
        'description' => 'Api path to return description of node for Shanti grid view',
        'page callback' => 'shanti_grid_view_item_info',
        'page arguments' => array(3, 4),
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
      );
      /**
       * Menu path to return image url based on FID and size
       */
      $items['shanti/grid/imagefile/%/%'] = array(
        'title' => '',
        'description' => 'Api path to return an image url based on FID and Size',
        'page callback' => 'shanti_grid_view_imagefile_url',
        'page arguments' => array(3, 4),
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
      );
      return $items;
}


/**
 * Page callback: Shanti Images settings
 *
 */
function shanti_grid_view_admin_form($form, &$form_state) {
    $form['shanti_grid_view_reset_box'] = array(
        '#type' => 'fieldset',
        '#title' => t('Shanti Grid View Reset'),
        '#collapsible' => FALSE,
    );
    $form['shanti_grid_view_reset_box']['shanti_grid_view_reset'] = array(
        '#type' => 'submit',
        '#value' => t('Reset Image Size Cache'),
        '#suffix' => t('<p>Image sizes are cached for the grid view and the lightbox. Use this button to clear that cache.</p>'),
        '#submit' => array('shanti_grid_view_cache_reset'),
    );
    return $form;
}

function shanti_grid_view_cache_reset($form, &$form_state) {
    $q = db_truncate('shanti_grid_image_sizes')->execute();
    drupal_set_message(t('Shanti Grid View image size cache cleared!'));
}

/**
 * Implements hook_image_default_styles
 *  Defines default image styles for shanti grid view: Shanti Grid Teaser and Shanti Grid Full
 */
function shanti_grid_view_image_default_styles() {
    $styles = array();
    
    $styles['shanti_grid_teaser'] = array(
        'label' => 'Shanti Grid Teaser',
        'effects' => array(
            array(
                'name' => 'image_scale',
                'data' => array(
                'width' => '',
                'height' => 165,
                'upscale' => 1,
            ),
            'weight' => 0,
            ),
        ),
    );
    
    $styles['shanti_grid_large'] = array(
        'label' => 'Shanti Grid Large',
        'effects' => array(
            array(
                'name' => 'image_scale',
                'data' => array(
                'width' => 550,
                'height' => '',
                'upscale' => 1,
            ),
            'weight' => 0,
            ),
        ),
    );
    
    $styles['shanti_grid_full'] = array(
        'label' => 'Shanti Grid Full',
        'effects' => array(
            array(
                'name' => 'image_scale',
                'data' => array(
                'width' => 1200,
                'height' => '',
                'upscale' => 1,
            ),
            'weight' => 0,
            ),
        ),
    );
    return $styles;
}

/**
* Implements hook_entity_info_alter().
 * This adds view moes to nodes and files for "Grid Details" 
 * This view mode is used to display the information in the image next to the grid
 * Admins can customize what information shows in the panels using the node content type or file display UI.
 * 
 * Grid Details view mode for images is overridden by node--shanti-image--grid-details.tpl.php
*/

function shanti_grid_view_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['grid_details'] = array(
    'label' => t('Grid Details'),
    'custom settings' => TRUE,
  );
  $entity_info['file']['view modes']['grid_details'] = array(
    'label' => t('Grid Details'),
    'custom settings' => TRUE,
  );
}

/**
 * Callback for menu item "shanti/grid/info/{type}/{id}". Returns the details panel that shows next to the image in the drop down.
 *      @param $type : either "node" or "file"
 *      @param $eid :  the entity id of the node or file
 */
function shanti_grid_view_item_info($type = FALSE, $eid = FALSE, $view_name = FALSE) {
    if (!empty($type) && !empty($eid) ) {
        // Caching grid view entity info for drop down details so it loads faster
        $cache_name = "shanti_grid_view_{$type}_{$eid}_info";
        if ($cache = cache_get($cache_name)) {
          $html = $cache->data;
        } else if ($type == 'node') {
            $ent = node_load($eid);
            $details = node_view($ent, 'grid_details');
            $html = drupal_render($details);
            cache_set($cache_name, $html, 'cache');
        } elseif ($type == 'file') {
            $ent = file_load($eid);
            $details = file_view($ent, 'grid_details');
            $html = drupal_render($details);
            cache_set($cache_name, $html, 'cache');
        } else {
          // Unknown item call (Data items use separate function
          watchdog('shanti_grid_view', "Bad call to shanti_grid_view_item_info: $eid , $view_name, $type");
        }
        print $html;
        
    } else {
        watchdog('shanti_grid_view', 'Invalid parameters for shanti_grid_view_item_info function');
    }
}

/**
 *
 * A function called by the views data source option, using a custom views data source, if the popdown (ppd) info is to
 * be obtained from either a function call or caching the views results. In either case, the url for the details is:
 * .../shanti/grid/dinfo/%/%/% with view name, current display, and ID as the variables. If it's a function type, it
 * calls that function with the given id and prints the results. If it's a cache, it loads the cache and renders it
 * according to the settings.
 *
 * @param $vname    : The view name
 * @param $curdis   : The current display
 * @param $id       : The item's id
 */
function shanti_grid_view_data_item_info($vname, $curdis, $id) {
    $view = views_get_view($vname);
    $view->set_display($curdis);
    $view->execute();
    $view_opts = $view->style_plugin->options;
    if (isset($view_opts['data_type_info'])) {
        $options = $view_opts['data_type_info'];
        if (isset($options['ppd_info'])){
            $type = $options['ppd_info'];
            if ($type == 'function') {
                $render_function = $options['ppd_info_func'];
                $html = $render_function($id);
                print $html;
            } elseif ($type == 'view') {
                // Used cached view results
                $cache_name = "grid_view_{$vname}_{$curdis}_rows"; // Build cache name
                $cdata = cache_get($cache_name);  // Get Cachse
                if (!empty($cdata)) {

                    // Parse the field map in the grid view settings
                    $mapstring = $options['ppd_info_cache'];
                    $mapitems = explode("\n", $mapstring);
                    $map = array();
                    foreach($mapitems as $item) {
                      $pts = explode('|', trim($item));
                      if (count($pts) == 2) {
                        $map[$pts[0]] = $pts[1];
                      }
                    }

                    // Get the ID field name and match that with given ID
                    $id_field_name = $options['id'];
                    $results = unserialize($cdata->data);
                    foreach ($results as $res) {
                      if ($res->{$id_field_name} == $id) {
                        // Use Map to build data array for template
                        $tmpdata = array();
                        foreach ($map as $fn => $rep_str) {
                          if (isset($res->{$fn})) {
                            $tmpdata[$rep_str] = $res->{$fn};
                            if ($rep_str == 'GVDATE') {
                              $dt = strtotime($tmpdata[$rep_str]);
                              $tmpdata[$rep_str] = format_date($dt, 'custom', 'M j, Y');
                            }
                            if ($rep_str == 'GVWIDTH' && strstr($tmpdata[$rep_str], 'x')) {
                              $pts = explode('x', $tmpdata[$rep_str]);
                              $tmpdata[$rep_str] = $pts[0];
                            }
                            if ($rep_str == 'GVHEIGHT' && strstr($tmpdata[$rep_str], 'x')) {
                              $pts = explode('x', $tmpdata[$rep_str]);
                              $tmpdata[$rep_str] = $pts[1];
                            }
                          }
                        }
                        // Build HTML with template function and data array
                        $html = shanti_grid_view_render_info($tmpdata);
                        print $html;
                        break;
                      }
                    }
                }
            }
        }
    }

}

/**
 * Implements hook_node_update
 */
function shanti_grid_view_node_update($node) {
    // If details are already cached then redo cached for updated node
    $cache_name = "shanti_grid_view_node_{$node->nid}_info";
    if (cache_get($cache_name)) {
        $details = node_view($node, 'grid_details');
        $html = render($details);
        cache_set($cache_name, $html, 'cache');
    }
}

/**
 * A function to return an image based on FID and size
 * Invokes a hook_fileurl_for_grid to get a url for a file image given FID and size. Otherwise just returns the file url regardless of size
 * Must be .jpg for now
 */
function shanti_grid_view_imagefile_url($fid, $size, $mode='image') {
    $file = file_load($fid);
    $uri = isset($file->uri) ? $file->uri : FALSE;
    $url = ($uri) ? file_create_url($uri) : FALSE;
    $otherurl = module_invoke_all('fileurl_for_grid', $fid, $size);
    $url = (empty($otherurl)) ? $url : $otherurl[0];
    if ($mode == 'url') {
        return $url;
    } else {
        // TODO: If url still FALSE, show default image
        header('Content-Type: image/jpeg');
        //header('Content-Length: ' . filesize($url));
        $dossl = (isset($_ENV['AH_PRODUCTION']) && $_ENV['AH_PRODUCTION'] == 1) ? true : false;
        $context = stream_context_create(array(
            'ssl' => array(
                'verify_peer' => $dossl,
                'verify_peer_name' => $dossl,
            )
        ));
        echo @file_get_contents($url, false, $context);
    }
}

/**
 * Implements hook_views_api()
 *
 * Returns what version of views you are using. Ex 7.3x would be 3
 */
function shanti_grid_view_views_api() {
  return array(
    'api' => 3,  // we are using views 3
    'path' => drupal_get_path('module', 'shanti_grid_view') . '/includes',
  );
}

/**
 * Implements hook_views_pre_render
 * 
 * Sets up the view and the gallery by adding JS and CSS and getting the necessary image urls
 */
function shanti_grid_view_views_pre_render(&$view) {
    global $base_root, $base_path;
    if (isset($view->style_plugin->plugin_name) && $view->style_plugin->plugin_name == 'shanti_grid_view') {
        //dpm($view->current_display, $view->name);
        $view->item_type =  _shanti_grid_view_get_item_type($view->base_table);  // Determine whether node or file view
        shanti_grid_view_set_gallery_session($view->result, 'view'); // Call function to set up session variable for gallery
        
        // Add necessary JS
        drupal_add_js(drupal_get_path('module', 'shanti_grid_view') . '/js/pig.js', array('group'=>JS_LIBRARY, 'weight'=>9980));
        drupal_add_js(drupal_get_path('module', 'shanti_grid_view') . '/js/pig-shanti-ext.js', array('group'=>JS_LIBRARY, 'weight'=>9990));
        drupal_add_js(drupal_get_path('module', 'shanti_grid_view') . '/js/jquery.actual.min.js', array('group'=>JS_LIBRARY, 'weight'=>9950));
        drupal_add_js(libraries_get_path('hammer', TRUE) . '/hammer.min.js', array('group'=>JS_LIBRARY, 'weight'=>9940));
        drupal_add_js(libraries_get_path('hammer', TRUE) . '/hammer-time.min.js', array('group'=>JS_LIBRARY, 'weight'=>9930));
        
        // Add necessary CSS
        drupal_add_css(drupal_get_path('module', 'shanti_grid_view') . '/css/shanti-pig-gallery.css');
        drupal_add_css(drupal_get_path('module', 'shanti_grid_view') . '/css/photoswipe.css');
        drupal_add_css(drupal_get_path('module', 'shanti_grid_view') . '/css/pswp-default-skin.css');

      // Create array for JS Settings
        $settings = array(
            'total_items' => $view->total_rows,
            'items_per_page' => $view->items_per_page,
            'current_page' => $view->current_page,
        );

        // Determine which kind of grid view it is based on settings
        if ($view->style_options['iiif_view'] == TRUE) {
            // IIIF view is meant to work with Shanti Images module
            $imgdata = array();
            $imgfield = 'field_' . $view->style_options['iiif_options']['iiif_img_field'];
            foreach ($view->result as $rn => &$item) {
                $n = 0;
                $processed = FALSE;
                if (module_exists('shanti_images')) {
                    $si = _shanti_images_get_node_image($item->nid);
                    if ($si && !empty($si)) {
                        $data = array(
                            "filename" => $si->getIIIFName(),
                            "title" => $si->title,
                            "aspectRatio" => $si->getRatio(),
                            "rotation" => $si->rotation,
                            "nid" => $item->nid,
                            "path" => drupal_get_path_alias($si->path),
                        );
                        $item->grid_data = json_encode($data);
                        $imgdata[] = (object)$data;
                        $processed = TRUE;
                    }
                }
                if (!$processed && !empty($item->{$imgfield}[$n]['rendered']['#markup'])) {
                    // Markup for IIIF view is JSON text with info in it. 
                    // See shanti_image/features/shanti_image_type/shanti_image_type.module function shanti_image_type_field_formatter_view()
                     $js = json_decode($item->{$imgfield}[$n]['rendered']['#markup']); // decode json object to add more fields
                     if (!empty($js->filename) && !empty($js->aspectRatio)  && $js->aspectRatio !== FALSE) {
                        if (isset($item->title)) { $js->title = $item->node_title; }
                        if (isset($item->nid)) { $js->nid = $item->nid; }
                        if (isset($item->path)) { $js->path = drupal_get_path_alias($item->path); }
                        if (isset($item->rotation)) { $js->rotation = $item->rotation; }
                        $imgdata[] = $js;
                     }
                }
            }

            $settings['entity_type'] = 'node';
            $settings['grid_image_size'] = $view->style_options['iiif_options']['iiif_thumb_size'];
            $settings['popdown_image_size'] = $view->style_options['iiif_options']['iiif_pd_size'];
            $settings['imgdata'] = $imgdata;
            // Same syntax: https://iiif-test.lib.virginia.edu/mandala/__FNAME__/full/!__SIZE__,__SIZE__/0/default.jpg
            $settings['url_for_size'] = variable_get('shanti_images_view_url','https://iiif.lib.virginia.edu') .
                  $view->style_options['iiif_options']['iiif_url_syntax'];
            drupal_add_js(array( 'shanti_grid_view' => $settings, ), 'setting');

        } else if ($view->style_options['entity_type'] == 'node') {
            // Non-IIIF Node Based View
            /*
             * Need an object with:
             *    - filename: replaces __FNAME__ in url_for_size syntax
             *    - title:
             *    - aspectRatio:
             *    - rotation:
             *    - nid
             *    - path
             */
            $imgdata = array();
            $thumb_field_name = 'field_' . $view->style_options['node_type_info']['thumbnail_image'];
            $ct = 0;
            foreach ($view->result as $rn => &$item) {
              $ct++;
              $imgobj = new stdClass();
              $imgobj->nid = $item->nid;
              $imgobj->title = $item->node_title;
              $thumb = $item->{$thumb_field_name}[0]['raw'];
              $imgobj->aspectRatio = $thumb['width'] / $thumb['height'];
              if ($imgobj->aspectRatio === FALSE) {
                $imgfile = file_load($thumb['fid']);
                $imgobj->aspectRatio = $imgfile->width / $imgfile->height;
              }
              $imgobj->path = url('node/' . $item->nid);
              $imgobj->lgimgurl = file_create_url($thumb['uri']);
              $imgobj->filename = $imgobj->lgimgurl; // if filename is needed to create another url, just use the full image url
              $imgdata[] = $imgobj;
            }
            $settings['entity_type'] = 'node';
            $settings['imgdata'] = $imgdata;
            $settings['url_for_size'] = '__FNAME__';  // Just use __FNAME__ and set filename to image url
            drupal_add_js(array( 'shanti_grid_view' => $settings, ), 'setting');

        } else if ($view->style_options['entity_type'] == 'file') {
            // File Based View 
            $imgdata = array();
            foreach ($view->result as $rn => &$item) {
                $n = 0;
                $imgobj = new stdClass();
                $imgobj->filename = $item->fid;
                $imgobj->title = $item->file_managed_filename;
                $imgurl = shanti_grid_view_imagefile_url($item->fid, '400', 'url');
                $imgpath = str_replace($base_root . $base_path, '', $imgurl);
                $imginfo = image_get_info($imgpath);
                if ($imginfo['width'] > 0 && $imginfo['height'] > 0) {
                    $imgobj->aspectRatio = $imginfo['width'] / $imginfo['height'];
                    $imgobj->nid = $item->fid;  // "nid" is already the variable name. Grandfathered in.
                    $imgobj->path = url('file/' . $item->fid);
                    $imgdata[] = $imgobj;
                }
            }
            $settings['entity_type'] = 'file';
            $settings['imgdata'] = $imgdata;
            $settings['url_for_size'] = $base_root . $base_path . 'shanti/grid/imagefile/__FNAME__/__SIZE__';
            drupal_add_js(array( 'shanti_grid_view' =>$settings, ), 'setting');

        } elseif ($view->style_options['entity_type'] == 'data') {
            // Views Custom Data Source
            $imgdata = array();
            $id_field_name = $view->style_options['data_type_info']['id'];
            $title_field_name = $view->style_options['data_type_info']['title'];
            $thumb_field_name = $view->style_options['data_type_info']['thumbnail_image'];
            $thumb_width_field = $view->style_options['data_type_info']['thumbnail_width'];
            $thumb_height_field = $view->style_options['data_type_info']['thumbnail_height'];
            $iiif_name_field = (!empty($view->style_options['data_type_info']['filename'])) ? $view->style_options['data_type_info']['filename'] : FALSE;
            $ppd_type = $view->style_options['data_type_info']['ppd_info'];
            // Determine ppd path based on setting choice for how ppd details are populated
            if ($ppd_type == 'url') {
                $ppd_path = $view->style_options['data_type_info']['ppd_info_url'];
            } elseif ($ppd_type == 'function') {
                $ppd_path = "/shanti/grid/dinfo/{$view->name}/{$view->current_display}/__ID__";
            } elseif ($ppd_type == 'view') {
                $cache_name = "grid_view_{$view->name}_{$view->current_display}_rows";
                cache_set($cache_name, serialize($view->result));
                $ppd_path = "/shanti/grid/dinfo/{$view->name}/{$view->current_display}/__ID__";
            }

            $item_path = $view->style_options['data_type_info']['item_url'];
            $path_is_view_field = (strstr($item_path, '__ID__')) ? FALSE : TRUE;

            $url4sz = '__FNAME__'; // Just use __FNAME__ and set filename to image url
            if (!empty($view->style_options['data_type_info']['img_by_size_url'])) {
              $url4sz = $view->style_options['data_type_info']['img_by_size_url'];
            }

            $settings['url_for_size'] = $url4sz;

            $ct = 0;

            foreach ($view->result as $rn => &$item) {
              $ct++;
              $imgobj = new stdClass();
              $imgobj->nid = $item->{$id_field_name};
              $imgobj->ppdpath = str_replace('__ID__', $imgobj->nid, $ppd_path);
              $imgobj->title = $item->{$title_field_name};
              $thumb = $item->{$thumb_field_name};
              $width = $item->{$thumb_width_field};
              if (strstr($width, 'x')) {
                $pts = explode('x', $width);
                $width = trim($pts[0]);
              }
              if (strstr($width, '|')) {
                $pts = explode('|', $width);
                $width = trim($pts[0]);
              }
              $height = $item->{$thumb_height_field};
              if (strstr($height, 'x')) {
                $pts = explode('x', $height);
                $height = trim($pts[1]);
              }
              if (strstr($height, '|')) {
                $pts = explode('|', $height);
                $height = trim($pts[1]);
              }
              if (is_numeric($width) && $width > 0 && is_numeric($height) && $height > 0) {
                $imgobj->aspectRatio = $width / $height;
              } else {
                $imgobj->aspectRatio = 1;
              }
              // If there is an iiif name field, use that for file name
              if ($iiif_name_field !== FALSE && !empty($iiif_name_field)) {
                $imgobj->filename = $item->{$iiif_name_field};
                $imgurl = str_replace('__FNAME__', $imgobj->filename, $url4sz);
                //$ppdurl = str_replace('__SIZE__', '450', $imgurl);
                $lgurl = str_replace('__SIZE__', '2000', $imgurl);
                //$imgobj->ppdimgurl = $ppdurl;
                $imgobj->lgimgurl = $lgurl;
              } else {
                // Otherwise assume using full urls (This needs to be enhanced)
                $imgobj->ppdimgurl = $thumb;
                $imgobj->lgimgurl = $thumb;
                $imgobj->filename = $thumb;
              }
              if ($path_is_view_field) {
                $imgobj->path = $item->{$item_path};
              } else {
                $imgobj->path = str_replace('__ID__', $imgobj->nid, $item_path); //$imgobj->ppdpath;
              }
              $imgdata[] = $imgobj;
            }

            $settings['entity_type'] = str_replace('_','-', $view->base_table); //'data';
            $settings['view_name'] = str_replace('_', '-', $view->name);
            $settings['imgdata'] = $imgdata;
            $settings['imgdatalen'] = count($imgdata);
            $settings['popdown_image_size'] = 450;
            drupal_add_js(array( 'shanti_grid_view' => $settings, ), 'setting');

        } else {
          drupal_set_message(t('Unknown view entity type in Shanti Grid View'), 'warning');
        }
    }
}

/**
 * Stores gallery state in session variable to be used by image page for carousel of thumbs
 */
function shanti_grid_view_set_gallery_session($results, $type) {
    if ($type == 'view') {
        $data = array();
        foreach($results as $n => $item) {
            if ( !empty($item->field_field_image) && !empty($item->field_field_image[0]['rendered']['#markup'])) {
                $data[]  = json_decode($item->field_field_image[0]['rendered']['#markup']);
            } else if (is_object($item)) {
                if (isset($item->nid)) {
                    global $base_path;
                    $nid = $item->nid;
                    $gitem = new stdClass;
                    $gitem->nid = $nid;
                    $gitem->title = $item->title;
                    $gitem->url = url('/node/' . $item->nid);
                    /** was Develop branch
                        $gitem->filename = $siobj->filename;
                        $gitem->aspectRatio = $siobj->getRatio();
                        $gitem->title = (isset($item->title)) ? $item->title : '';
                        $gitem->url = $siobj->getURL('400');
                        $gitem->path = $base_path . drupal_get_path_alias('node/' . $nid);
                        $data[] = $gitem;
                    **/

                    // Custom code for Shanti Images. Should be moved there
                    if (module_exists('shanti_images')) {
                      $siobj = _shanti_images_get_node_image($nid);
                      $gitem->filename = $siobj->filename;
                      $gitem->aspectRatio = $siobj->getRatio();
                      $gitem->url = $siobj->getURL('400');
                      $gitem->path = $base_path . drupal_get_path_alias('node/' . $nid);
                    }

                    $data[] = $gitem;
                }
            }
        } 
        //if (!empty($data)) { $data = $results; }
        $_SESSION['shanti_gallery_info'] = $data;
        $_SESSION['shanti_gallery_url'] = url(current_path());
    }
}

/**
 * _shanti_grid_get_grid_image:
 *
 *  @param $uri : The image's URI
 *  @param $style : The machine name of the image style for the derrivative.
 * Helper function to ensure that the proper image derrivatives exist or else make them
 * @return  url
function _shanti_grid_get_grid_image($uri, $style) {
    if (!$style) { return $uri; }
    $derriv = image_style_path($style, $uri);
    if (!file_exists($derriv)) {
        image_style_create_derivative(image_style_load($style), $uri, $derriv);
    }
    return file_create_url($derriv);
}
 */

/**
 * Gets image size from module's table is it exists. If not, gets size of image and adds to table
 * 
 * Parameters;
 *      iid : image id "n###" for nodes, or "f###" for files
 *      sz : size type of image either "teaser" or "large"
 *      url : url of image (used with getimagesize() if no size in db)
 */
function _shanti_grid_view_get_imagesize($iid, $sz, $url) {
   
    $res = db_select('shanti_grid_image_sizes', 'sgi')
                   ->fields('sgi')
                    ->condition('sgi.iid', $iid)
                    ->condition('sgi.isize', $sz)
                    ->execute()
                    ->fetchAll();
    if (count($res) > 0) {
        $res = $res[0];
        return $res->width . ',' . $res->height . ',' . $res->ratio;
    } else {
        $imagesize = getimagesize($url);
        if (!$imagesize) {
            $imagesize = array(0, 0);
        } else {
            $ratio = parseInt($imagesize[0]) / parseInt($imagesize[1]);
            $q = db_insert('shanti_grid_image_sizes')
                        ->fields(array(
                                'iid' => $iid,
                                'isize' => $sz,
                                'width' => $imagesize[0],
                                'height' => $imagesize[1],
                                'ratio' => $ratio,
                            ))
                         ->execute();
        }
        return "{$imagesize[0]},{$imagesize[1]},$ratio";
    }
}

function shanti_grid_view_preprocess_node(&$vars) {
    if ($vars['view_mode'] == 'grid_details') {
        $vars['theme_hook_suggestions'][] = 'node__shanti_image__grid_details';
        $assoc = array(
            'size' => '',
            'type' => '',
            'description' => '',
        );
       foreach ($vars['content'] as $key => $value) {
            if (strstr($key, 'pixel') || strstr($key, 'dimension') || strstr($key, 'size')) {
                $assoc['size'] = render($value);
            } elseif (strstr($key, 'type') || strstr($key, 'ext')) {
                $assoc['type'] = render($value);
            } elseif (strstr($key, 'desc')) {
                $assoc['desc'] = render($value[0]);
            } elseif (strstr($key, 'agent')) {
                $assoc['agent'] = render($value[0]);
            } elseif (strstr($key, 'place')) {
                $places = array();
                foreach(element_children($value) as $n) {
                    $places[] =  render($value[$n]) ;
                }
                $assoc['place'] = implode('', $places); // render($value[0]);
            } elseif (strstr($key, 'subject')) {
                $subjects = array();
                foreach(element_children($value) as $n) {
                    $subjects[] = render($value[$n]);
                }
                $assoc['subject'] = implode('', $subjects);
            } else if (strstr($key, 'collection')) {
                $assoc['collection'] = render($value[0]);
            }
        }
        $vars['grid_fields'] = $assoc;
    }
}

/**
* Implements hook_theme().
function shanti_grid_view_theme($existing, $type, $theme, $path) {
    $theme = array();
    $theme['node__shanti_image__grid_details'] = array(
        'render element' => 'content',
        'base hook' => 'node',
        'template' => 'node--shanti-image--grid-details',
        'path' => drupal_get_path('module', 'shanti_grid_view') . '/templates',
    );
    return $theme;
}

 */
function shanti_grid_view_theme_registry_alter(&$theme_registry) {
    if (!empty($theme_registry['shanti_grid_view_gallery'])) {
        $theme_registry['shanti_grid_view_gallery']['path'] = drupal_get_path('module', 'shanti_grid_view') . '/templates';
    }
}

/**
 * Function to determine the item type displayed in a view
 */
function _shanti_grid_view_get_item_type($table) {
  if (strstr($table, 'file')) {
    $entity_type = 'file';
  } elseif ($table == 'node') {
    $entity_type = 'node';
  } else {
    $entity_type = 'data';
  }
  return $entity_type;
}


/**
 * @param array $indata   : an array of data keyed on the following fields or indexed in this order:
 *
 *       GVID         : a unique numeric id, together with type this becomes the id, e.g. "node-1234"
 *       GVTITLE      : The title
 *       GVAUTH       : the markup for the author's name/link
 *       GVSUBTYPE    : the asset subtype
 *       GVWIDTH      : the width of the image
 *       GVHEIGHT     : the height of the image
 *       GVDATE       : the date of the image
 *       GVCOLLECTION : the name/link for the collection
 *       GVPLACES     : the markup for the kmaps place tags
 *       GVSUBJECTS   : the markup for the subjects tags
 *       GVDESC       : the description for this item
 *
 * Prints out the html from a template with the data inserted used in the detail/info pane (ppdinfo)
 *
 */
function shanti_grid_view_render_info($indata = array()) {
    $tmpl = _shanti_grid_view_get_general_template();
    $keys = array("GVID", "GVTITLE", "GVAUTH", "GVSUBTYPE", "GVWIDTH", "GVHEIGHT", "GVDATE", "GVCOLLECTION",
                    "GVPLACES", "GVSUBJECTS", "GVDESC");

    // If indata is not an associative array with the keys, then convert to one by adding keys in sequential order.
    if (!isset($indata['GVID']) && isset($indata[0])) {
        $data = array();
        foreach ($keys as $n => $key) {
            $data[$key] = $indata[$n];
        }
    } else {
        $data = $indata;
    }

    // Deal with kmaps
    if (!empty($data['GVPLACES']) && is_numeric(str_replace('|', '', $data['GVPLACES']))) {

      $kmaps = explode('|', $data['GVPLACES']);
      $kmap_out = array();
      foreach($kmaps as $kmp) {
        $ra = shanti_kmaps_fields_get_popover_array('places', $kmp);
        $kmap_out[] = render($ra);
      }
      $data['GVPLACES'] = implode(' ', $kmap_out);
    }

    if (!empty($data['GVSUBJECTS']) && is_numeric(str_replace('|', '', $data['GVSUBJECTS']))) {

      $kmaps = explode('|', $data['GVSUBJECTS']);
      $kmap_out = array();
      foreach($kmaps as $kmp) {
        $ra = shanti_kmaps_fields_get_popover_array('subjects', $kmp);
        $kmap_out[] = render($ra);
      }
      $data['GVSUBJECTS'] = implode(' ', $kmap_out);
    }

    $tmpl = str_replace('GVTYPE', 'data', $tmpl); // Type = type of grid view used for a div class, here "data"

    // Replace Keys with their value in the template
    foreach ($data as $key => $val) {
        $tmpl = str_replace($key, $val, $tmpl);
    }

    // Replace any unsubstituted keys with nothing
    if (strstr($tmpl, 'GVWIDTH')) {
      $tmpl = str_replace('class="size-cnt"', 'class="size-cnt hidden"', $tmpl);
    }

    if (strstr($tmpl, 'GVCOLLECTION')) {
      $tmpl = str_replace('class="collections"', 'class="collections hidden"', $tmpl);
    }

    if (strstr($tmpl, 'GVPLACES')) {
      $tmpl = str_replace('class="place"', 'class="place hidden"', $tmpl);
    }

    if (strstr($tmpl, 'GVSUBJECTS')) {
      $tmpl = str_replace('class="subject"', 'class="subject hidden"', $tmpl);
    }

    $keys[4] = "GVWIDTHx";
    foreach ($keys as $key) {
        $tmpl = str_replace($key, '', $tmpl);
    }

    print $tmpl;
}

/**
 * Return the shanti info general template filled out with given info
 */

function _shanti_grid_view_get_general_template() {
  $tmpl_url = drupal_get_path("module", "shanti_grid_view") . "/templates/general-grid-details.tpl.php";
  $tmpl = file_get_contents($tmpl_url);
  return $tmpl;
}