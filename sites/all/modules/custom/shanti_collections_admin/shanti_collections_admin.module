<?php

function shanti_collections_admin_menu()
{
    return array(
        'admin/config/content/shanti_collections_admin' => array(
            'title' => 'SHANTI Collections Admin',
            'description'       => 'Define variables for Collections and Subcollections.',
            'page callback'     => 'shanti_collections_admin_overview',
            'access arguments'  => array('administer shanti_collections_admin'),
            'type'              => MENU_NORMAL_ITEM,
        ),
        'admin/config/content/shanti_collections_admin/fields' => array(
            'title' => 'Fields',
            'description'       => 'Specify OG fields for Collections and Subcollections.',
            'page callback'     => 'drupal_get_form',
            'page arguments'    => array('shanti_collections_admin_fields'),
            'access arguments'  => array('administer shanti_collections_admin'),
            'type'              => MENU_LOCAL_TASK,
        ),
        'admin/config/content/shanti_collections_admin/types' => array(
            'title' => 'Types',
            'description'       => 'Specify content types for Collections and Subcollections.',
            'page callback'     => 'drupal_get_form',
            'page arguments'    => array('shanti_collections_admin_types'),
            'access arguments'  => array('administer shanti_collections_admin'),
            'type'              => MENU_LOCAL_TASK,
        ),
        'admin/config/content/shanti_collections_admin/views' => array(
            'title' => 'Views',
            'description'       => 'Specify views for Collections and Subcollections.',
            'page callback'     => 'drupal_get_form',
            'page arguments'    => array('shanti_collections_admin_views'),
            'access arguments'  => array('administer shanti_collections_admin'),
            'type'              => MENU_LOCAL_TASK,
        ),
        'shanti_collections_admin/test' => array(
            'title'             => 'SHANTI Collections Testing',
            'description'       => 'A test page',
            'page callback'     => 'shanti_collections_admin_test',
            'access arguments'  => array('administer shanti_collections_admin'),
            'type'              => MENU_NORMAL_ITEM,
        ),
        'shanti_collections_admin/convert/collection/%' => array(
            'title' => 'Convert Collection to Subcollection',
            'description'       => 'Specify views for Collections and Subcollections.',
            'page callback'     => 'drupal_get_form',
            'page arguments'    => array('shanti_collections_admin_convert_collection', 3),
            'access arguments'  => array('edit own collection content'),
            'type'              => MENU_LOCAL_TASK,
        ),
    );
}

function shanti_collections_admin_permission()
{
    return array(
        'administer shanti_collections_admin' => array(
          'title' => t('Administer SHANTI Collections Admin'),
          'description' => t('Perform administration tasks for SHANTI Collections Admin.'),
        ),
        'convert shanti_collections' => array(
            'title' => t('Convert between Shanti Collections and Subcollections'),
            'description' => t('Allows user to convert any collection into a subcollection and vice versa'),
        ),
      );
}

function shanti_collections_admin_overview()
{
	# Handle content types array
	$ctypes = array();
	foreach(variable_get('shanti_collections_admin_content_types') as $k => $v) {
		if ($v) {
			$ctypes[] = $k;
		}
	}

	$items = array(
		'#theme' => 'table',
		'#rows' => array(
			array(t('OG Collection Field'), variable_get('shanti_collections_admin_collection_field')),
			array(t('OG Parent Collection Field'),variable_get('shanti_collections_admin_collection_parent_field')),
			array(t('Content Types'), join(",", $ctypes)),
			array(t('Content Views'), variable_get('shanti_collections_admin_content_views')),
			array(t('Members View'), variable_get('shanti_collections_admin_members_view'))
		),
	);
	return $items;
}

function shanti_collections_admin_fields()
{
  $form['shanti_collections_admin_collection_field'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Collection Field'),
    '#default_value'  => variable_get('shanti_collections_admin_collection_field','field_og_collection_ref'),
    '#size'           => 60,
    '#description'    => t('The OG field that links a media asset to a Collection or Subcollection.'),
    '#required'       => TRUE,
  );
  $form['shanti_collections_admin_collection_parent_field'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Parent Collection Field'),
    '#default_value'  => variable_get('shanti_collections_admin_collection_parent_field','field_og_parent_collection_ref'),
    '#size'           => 60,
    '#description'    => t('The OG field that links a Subcollection to a parent Collection.'),
    '#required'       => TRUE,
  );
  $form['#validate'] = array('shanti_collections_admin_fields_validate');
  return system_settings_form($form);
}

function shanti_collections_admin_fields_validate($form, &$form_state)
{
	$f1 = $form_state['values']['shanti_collections_admin_collection_field'];
	$f2 = $form_state['values']['shanti_collections_admin_collection_parent_field'];
	$f1_info = field_info_field($f1);
	$f2_info = field_info_field($f2);
	if (!$f1_info) {
		form_set_error('OG Collection Field', t("<tt>$f1</tt> was not found."));
	}
	if(!$f2_info) {
		form_set_error('OG Parent Collection Field', t("<tt>$f2</tt> was not found."));
	}
}

function shanti_collections_admin_types()
{
  $form['shanti_collections_admin_content_types'] = array(
    '#type'           => 'checkboxes',
    '#title'          => t('Content Types'),
    '#options'        => shanti_collections_admin_get_content_types(),
    '#default_value'  => variable_get('shanti_collections_admin_content_types'),
    '#description'    => t('Content Types that can be added to Collections. If nothing appears here, you many need to change your fields.'),
    '#required'       => TRUE, # THIS IS BECAUSE IT DEPENDS ON THE PREVIOUS TWO
  );
  $form['#validate'] = array('shanti_collections_admin_types_validate');
  return system_settings_form($form);
}

function shanti_collections_admin_types_validate($form, &$form_state)
{
	# Nothing really to check
}


function shanti_collections_admin_views()
{
  $form['shanti_collections_admin_content_views'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Collection Items View'),
    '#default_value'  => variable_get('shanti_collections_admin_content_views','content_by_collection panel_pane_1'),
    '#size'           => 60,
    '#description'    => t('A view to be included on the Collections and Subcollections pages.<br />
    						Enter the machine name of the view plus the the display ID separated by a space.<br />
    						<b>Make sure this view includes all content types chose above and accepts multiple arguments!</b>'),
    '#required'       => TRUE,
  );
  $form['shanti_collections_admin_members_view'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Collection Members View'),
    '#default_value'  => variable_get('shanti_collections_admin_members_view','collection_members panel_pane_2'),
    '#size'           => 60,
    '#description'    => t('A view to be included on the Collections and Subcollections pages.<br />
    						Enter the machine name of the view plus the the display ID separated by a space.'),
    '#required'       => TRUE,
  );
  $form['#validate'] = array('shanti_collections_admin_views_validate');
  return system_settings_form($form);
}

function shanti_collections_admin_views_validate($form, &$form_state)
{
	$v1 = preg_split("/\s+/",$form_state['values']['shanti_collections_admin_content_views']);
	$v2 = preg_split("/\s+/",$form_state['values']['shanti_collections_admin_members_view']);
	$v1_info = views_get_view($v1[0]);
	$v2_info = views_get_view($v2[0]);
	if (!$v1_info) {
		form_set_error('Content View', t("<tt>$v1[0]</tt> was not found."));
	}
	if(!$v2_info) {
		form_set_error('Members View', t("<tt>$v2[0]</tt> was not found."));
	}
	if ($v1_info && !$v1_info->display[$v1[1]]) {
		form_set_error('Members View Display', t("<tt>$v1[1]</tt> was not found."));
	}
	if ($v2_info && !$v2_info->display[$v2[1]]) {
		form_set_error('Members View Display', t("<tt>$v2[1]</tt> was not found."));
	}
}

/**
 * Helper functions
 */

function shanti_collections_admin_get_content_types()
{
	$og_field = variable_get('shanti_collections_admin_collection_field','field_og_collection_ref');
    $info = field_info_fields();
    //$content_types = $info[$og_field]['bundles']['node'];  // NDG added all bundles bec. need to use groups with files in Image (for now, 2016-11-16)
    $bundles = $info[$og_field]['bundles'];
    $return = array();
    foreach ($bundles as $ctname => $content_types) {
        foreach($content_types as $ctype) {
            $return[$ctype] = $ctype;
        }
    }
    return $return;
}

function shanti_collections_admin_test()
{
	$og_field = variable_get('shanti_collections_admin_collection_field','field_og_collection_ref');
    $info = variable_get('shanti_collections_admin_content_types');
    dpm($info);
    return "Testing";
}

function shanti_collections_admin_get_collection_items_view($nid)
{
	$args = array();
	$args[] = $nid;
	$v1 = views_get_view('collections'); 	 # This view is part of the feature
	$v1->set_display('views_data_export_1'); # This display is part of the feature
	$v1->set_arguments(array($nid));
	$v1->pre_execute();
	$v1->execute();
	foreach ($v1->result as $item) { $args[] = $item->nid; }
	$arg_str = implode(",",$args);
	$view = preg_split("/\s+/", variable_get('shanti_collections_admin_content_views'));
	$v2 = views_embed_view($view[0],$view[1],$arg_str);
	return $v2;
}

/**
 * For a given Collection or Subcollection, get all the members associated with it.
 * In the case of Subcollections, this means get a distinct union of both the Collection
 * and Subcollection member set.
 */
function shanti_collections_admin_get_distinct_members($gids = array())
{
	$distinct_members = array();
	foreach($gids as $gid) {
		$members = shanti_collections_admin_get_users_in_group($gid);
		foreach ($members as $member) {
			$distinct_members[$member->uid] = $member;
		}
	}
	return $distinct_members;
}

function shanti_collections_admin_get_users_in_group($gid) {
 	$query = db_select('users', 'u');
  	$query->condition('u.uid', 0, '<>')
    	->condition('u.status', 1, '=')
    	->fields('u', array('uid', 'name'))
    	->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
	return $query->execute();
}

function shanti_collections_admin_preprocess_html(&$vars)
{
  if (
    in_array('node-type-collection',$vars['classes_array']) ||
    in_array('node-type-subcollection',$vars['classes_array']) ||
    in_array('page-collections',$vars['classes_array'])
  ){
    $vars['classes_array'][] = 'collection-page';
  }
}

function shanti_collections_admin_get_collection_id_of_node($nid)
{
    $node = node_load($nid);
    $lang = $node->language;
    $coll_id = 0;
    $coll_field = variable_get('shanti_collections_admin_collection_field');
    if (isset($node->{$coll_field}[$lang][0]['target_id'])) {
        $coll_id = $node->{$coll_field}[$lang][0]['target_id'];
    }
    return $coll_id;
}

/*
function shanti_collections_admin_node_view_alter(&$build) {
    dpm($build, 'build');
    dpm($build['#node'], 'node');
}

function shanti_collections_admin_page_alter(&$page) {
    dpm($page, 'paige');
}
*/

/**
 * Form function for converting collections into subcollections or vice versa.
 * Called from the path {home}/shanti_collections_admin/convert/collection/{nid}
 * Any user can convert their own collections into subcollections or vice versa
 * But there is also a permission 'convert shanti_collections' which allows a user to do so with any (sub)collection
 *
 * @param $form
 * @param $form_state
 * @param $nid          - the nid of the collection to convert
 * @return mixed
 */
function shanti_collections_admin_convert_collection($form, &$form_state, $nid) {
    global $user;
    if (empty($nid)) {
        form_set_error('nid', t("No Node ID given in form function"));
        return;
    }
    $node = node_load($nid);
    $path = drupal_get_path_alias('node/' . $nid);
    if ($node) {
        if ($node->uid === $user->uid || user_access('convert shanti_collections')) {
            $ntype = $node->type;
            $msg = '';
            if ($ntype == "collection") {
                $msg = t('Are you sure you want to convert the collection, <strong>@title</strong> (@nid), into a subcollection?', array(
                    '@title' => $node->title,
                    '@nid' => $nid,
                ));
                if (count(shanti_collections_get_subcollections($node)) > 0) {
                    drupal_set_message(t("You cannot convert a collection with child subcollections into a " .
                        "subcollection. <br> You must first remove all child subcollections."), 'warning');
                    drupal_goto($path);
                }
            } else if ($ntype == "subcollection") {
                $msg = t('Are you sure you want to convert the subcollection, <strong>@title</strong> (@nid), into a collection?', array(
                    '@title' => $node->title,
                    '@nid' => $nid,
                ));
            } else {
                drupal_set_message(t("A @nodetype cannot be converted into a collection",
                    array('@nodetype' => $ntype)),
                    'warning');
                drupal_goto($path);
            }

            $form['message'] = array(
                '#markup' => "<p>$msg</p>",
            );

            if ($ntype == 'collection') {
                $form['parent'] = array(
                    '#type' => 'select',
                    '#title' => t("Parent Collection"),
                    '#description' =>t("Select a parent collection for this one after it is converted to subcollection"),
                    '#options' => _shanti_collections_admin_get_user_collections($nid),
                );
            }
            $form['nid'] = array(
                '#type' => 'hidden',
                '#value' => $nid,
            );
            $form['cancel'] = array(
                '#type' => 'button',
                '#value' => t('Cancel'),
            );
            $form['submit'] = array(
                '#type' => 'submit',
                '#value' => 'Convert',
            );
            return $form;
        } else {
            drupal_set_message(t('You do not have permissions to perform that action.'), 'warning');
            drupal_goto($path);
        }
    } else {
        drupal_set_message(t("@n is not a valid node ID", array('@n' => $nid)), 'warning');
        drupal_goto();
    }
}

/**
 * Function used to get either a list of user's collections to use as a new parent for a collection
 * converted to subcollection. Or if the user has the 'convert shanti_collections' permission then
 * it lists all collections. Removed the given node ID so a node cannot be made parent of itself.
 *
 * Called from the shanti_collections_admin_convert_collection form
 *
 * @param $nid
 * @return array
 */
function _shanti_collections_admin_get_user_collections($nid) {
    global $user;
    // Get list of all user collections or if permissions all collections
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'collection');
    if(!user_access('convert shanti_collections')) {
        $query->propertyCondition('uid', $user->uid);
    }
    $result = $query->execute();
    $nids = array_keys($result['node']);

    // Remove the collection to be converted from list of potential parents
    $self_index = array_search($nid, $nids);
    if ($self_index) {
        unset($nids[$self_index]);
    }

    // Load all potential parents and create list of titles keyed on nid
    $nodes = node_load_multiple($nids);
    $options = array();
    foreach ($nodes as $node) {
        $options[$node->nid] = $node->title;
    }
    // Add an empty choice for top and sort
    $options["0"] = '-- Choose a Parent --';
    asort($options);
    return $options;
}

function shanti_collections_admin_convert_collection_validate($form, &$form_state) {
    global $user;
    // Make sure an NID is given
    if (empty($form_state['values']['nid'])) {
        form_set_error('nid', t("No node id given"));
    } else {
        // Make sure the given NID is for a node of type collection or subcolection
        $node = node_load($form_state['values']['nid']);
        // Check if "Cancel" button was pressed
        if (!empty($form_state['triggering_element']) && $form_state['triggering_element']['#id'] == 'edit-cancel') {
            drupal_set_message('Collection conversion cancelled!');
            drupal_goto(drupal_get_path_alias('node/' . $node->nid));
        }
        if ($node->type == 'collection') {
            // If converting collection to subcollection, make sure a parent is given
            if (empty($form_state['values']['parent']) || $form_state['values']['parent'] == 0) {
                form_set_error('parent', t("You must choose a parent collection for this one to be placed under"));
            } else {
                // Make sure the parent itself is a collection
                $parent = node_load($form_state['values']['parent']);
                if ($parent->type != 'collection') {
                    form_set_error('parent', t("The parent you have chosen is not a collection"));
                }
                // And that the user owns it or has permission to add subcollections
                if ($parent->uid != $user->uid && !user_access('convert shanti_collections')) {
                    form_set_error('parent', t("You do not have permissions to add subcollections to that parent collection"));
                }
            }
        } elseif ($node->type == 'subcollection') {
            // NO validation necessary here
        } else {
            form_set_error('nid', t("Node to be converted is not the proper type: collection, subcollection"));
        }
    }
}

function shanti_collections_admin_convert_collection_submit($form, &$form_state) {
    if (empty($form_state['values']['nid'])) {
        drupal_set_message(t('No node id was sent to the collection conversion routine. Cannot proceed'), 'warning');
        return;
    }
    $nid = $form_state['values']['nid'];
    $node = node_load($nid);
    // Convert collection to subcollection
    if ($node->type == 'collection') {
        $node->type = 'subcollection';
        $node->og_user_inheritance = array();
        $node->og_user_permission_inheritance = array();
        node_save($node);
        $node->field_og_parent_collection_ref['und'][0]['target_id']   = $form_state['values']['parent'];
        node_save($node);

    // Convert subcollection to collection
    } elseif ($node->type == 'subcollection') {
        $node->field_og_parent_collection_ref = array();   // First remove value in og_parent_collection_ref table
        node_save($node);
        $node->og_user_inheritance = array(
            'und' => array(
                0 => array(
                    'value' => 1,
                ),
            ),
        );
        $node->og_user_permission_inheritance = array(
            'und' => array(
                0 => array(
                    'value' => 0,
                ),
            ),
        );
        $node->type = 'collection';  // Then change content type
        node_save($node);
    } else {
        drupal_set_message(t("Cannot convert @type into a collection.", array('@type' => $node->type)), 'warning');
    }

    // TODO: Do we possibly need to update the alias????
    drupal_goto(drupal_get_path_alias('/node/' . $nid));
}
