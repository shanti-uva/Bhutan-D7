<?php
/**
 * @file
 * Code for the Shanti Images
 */

define('MMS_DEL_VAR', 'shanti_images_mms_ignore_list');

module_load_include('inc', 'shanti_images', 'includes/shanti_images');

/**
 * Implement hook_init
 */
function shanti_images_init() {
    drupal_add_js(array('shanti_images' => array(
        'debug' => variable_get('shanti_images_debug', FALSE),
    )), 'setting');
}

/**
 * Implement hook_menu
 * placeholder until needed
 */
 function shanti_images_menu() {
    $items = array();
    $items['admin/config/media/shanti_images'] = array(
        'title' => 'Shanti Images',
        'description' => 'Configuration for Shanti Images module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('shanti_images_admin_form'),
        'access arguments' => array('administer shanti images'),
        'file' => 'includes/shanti_images.admin.inc',
        'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    );

    $items['admin/config/media/shanti_images/iiif'] = array(
        'title' => t('IIIF'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -20,
    );

     $items['admin/config/media/shanti_images/settings'] = array(
         'title' => t('Other Settings'),
         'type' => MENU_LOCAL_TASK,
         'page callback' => 'drupal_get_form',
         'page arguments' => array('shanti_images_admin_form_other'),
         'access arguments' => array('administer shanti images'),
         'file' => 'includes/shanti_images.admin.inc',
         'weight' => -15,
     );

    $items['admin/config/media/shanti_images/list'] = array(
        'title' => t('Shanti Image List'),
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'drupal_goto',
        'page arguments' => array('/admin/config/media/shanti_images/iiif-list-view'),
        'access arguments' => array('administer shanti images'),
        'weight' => -10,
    );

     $items['admin/shanti_images/list/removeid/%'] = array(
         'title' => t('Shanti Image List: Remove MMS ID'),
         'type' => MENU_CALLBACK,
         'page callback' => array('shanti_images_remove_mmsid_from_list'),
         'pages arguments' => array(4),
         'access arguments' => array('administer shanti images'),
     );

/* Used to update iiif file names. Saving in case another update is needed
     $items['admin/config/media/shanti_images/update'] = array(
         'title' => t('Update'),
         'type' => MENU_LOCAL_TASK,
         'page callback' => 'drupal_get_form',
         'page arguments' => array('shanti_images_admin_update_form'),
         'access arguments' => array('administer shanti images'),
         'file' => 'includes/shanti_images.admin.inc',
         'weight' => -5,
     );
*/
     /**
      * Path to MMS Summary Page
      */
     $items['admin/config/media/shanti_images/mms/summary'] = array(
         'title' => t('MMS Import Summary'),
         'page callback' => 'shanti_images_mms_summary_page',
         'type' => MENU_CALLBACK,
         'access arguments' => array('administer shanti images'),
     );

    /**
     * Path called by ajax to upload image to IIIF server for better performance
     * The three parameters in order are: NID, FID, and SIID
     */
    $items['image/upload/%/%/%'] = array(
        'page callback' => 'shanti_images_upload_iiif_callback',
        'page arguments' => array(2,3,4),
        'type' => MENU_CALLBACK,
        'access callback' => 'user_access',
        'access arguments' => array('create shanti_image content'),
    );

    // Path for downloading an shanti IIIF image (see _shanti_images_process_image_files and )
    $items['image/download/%/%'] = array(
        'page callback' => 'shanti_images_image_download',
        'page arguments' => array(2,3),
        'type' => MENU_CALLBACK,
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
    );

    // Path to get raw HTML check to embed elsewhere (used with image descriptions)
    $items['shanti-images/node-embed/%'] = array(
        'page callback' => 'shanti_images_node_embed',
        'page arguments' => array(2),
        'type' => MENU_CALLBACK,
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
    );

     $items['image/iiif/remove/%'] = array(
         'page callback' => 'drupal_get_form',
         'page arguments' => array('shanti_images_iiif_image_remove',3),
         'access callback' => 'user_access',
         'access arguments' => array('administer shanti images'),
         'file' => 'includes/shanti_images.admin.inc',
     );

    // Path to delete an IIIF image from the IIIF server, used by admin page
    $items['image/iiif/remove/%'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('shanti_images_iiif_image_remove',3),
        'access callback' => 'user_access',
        'access arguments' => array('administer shanti images'),
        'file' => 'includes/shanti_images.admin.inc',
    );

    /*** API Functions ***/
    // Return json of a single image node
    $items['api/ajax/%'] = array(
        'title' => 'Embeddable Image',
        'description' => 'Return an embeddable HTML DIV fragment for an image',
        'page callback' => 'shanti_images_node_embed',
        'page arguments' => array(2),
        'access callback' => TRUE,
    );
    $items['api/json/%'] = array(
        'title' => 'Image JSON Ingo',
        'description' => 'Return info about an image in JSON',
        'page callback' => 'shanti_images_node_json',
        'page arguments' => array(2),
        'access callback' => TRUE,
    );
    $items['api/thumb/%'] = array(
        'title' => 'Image JSON Ingo',
        'description' => 'Return info about an image in JSON',
        'page callback' => 'shanti_images_node_thumb',
        'page arguments' => array(2),
        'access callback' => TRUE,
    );

    $items['api/carouseldata/%'] = array(
        'title' => 'Node Carousel Data',
        'description' => 'Return the carousel for a particular node',
        'page callback' => 'shanti_images_get_node_carousel',
        'page arguments' => array(2),
        'access callback' => TRUE,
    );

     $items['api/carouseldata/slides/%/%/%'] = array(
         'title' => 'More Slides for Carousel',
         'description' => 'Return further slides for the carousel ',
         'page callback' => 'shanti_images_get_more_slides',
         'page arguments' => array(3,4,5),
         'access callback' => TRUE,
     );

     $items['api/imginfo/%/%'] = array(
         'title' => 'MMS ID Information',
         'description' => 'Return info about an image based on some type of id',
         'page callback' => 'shanti_images_info_api',
         'page arguments' => array(3,2),
         'access callback' => TRUE,
     );

     $items['search/mmsid/%'] = array(
         'title' => 'MMSID Lookup',
         'description' => 'Return the node page for a specific mmsid (for redirects)',
         'page callback' => 'shanti_images_mms_lookup',
         'page arguments' => array(2),
         'access callback' => TRUE,
     );

     $items['search/siid/%'] = array(
       'title' => 'Shanti Image ID Lookup',
       'description' => 'Return the node page for a specific Shanti Image ID',
       'page callback' => 'shanti_images_siid_lookup',
       'page arguments' => array(2),
       'access callback' => TRUE,
     );

     /**
      * Given an mms id return its iiif file name
      */
     $items['api/mms/iiif/%'] = array(
         'title' => '',
         'description' => 'Return the iiif filename for this mms image',
         'page callback' => 'shanti_images_get_mms_filename',
         'page arguments' => array(3),
         'access callback' => TRUE,
    );

    /** Open Seadragon map */
     $items['image/openseadragon.min.js.map'] = array(
         'title' => 'OpenSeadragon Map',
         'description' => 'Return OpenDragon JS from image/... url',
         'page callback' => 'shanti_images_js_map',
         'page arguments' => array('openseadragon'),
         'access callback' => TRUE,
     );

    return $items;
 }


/**
 * Implements hook_permission
 */
function shanti_images_permission()
{
    return array(
        'administer shanti images' => array(
            'title' => t('Administer Shanti Images'),
        ),
    );
}

/**
 * Implements hook_node_access().
 */
function shanti_images_node_access($node, $op, $account)
{
    // If a shanti image is set to private and does not have a group, do not allow anyone but owner to view
    if ($op == 'view' && isset($node->type)) {
            if ($node->type == 'shanti_image') {
                if (empty($node->field_og_collection_ref)) {
                    if ($node->group_content_access[LANGUAGE_NONE][0]['value'] == 2) {
                        if (isset($account->uid) && $account->uid == $node->uid) {
                            return NODE_ACCESS_ALLOW;
                        } else {
                            return NODE_ACCESS_DENY;
                        }
                    }
                }
            } elseif ($node->type == 'subcollection') {
                /* Allows users to see subcollections that are explicitly public, but can't see it's content
                Need to do more.
                if ($node->group_access['und'][0]['value'] == 0) {
                    return NODE_ACCESS_ALLOW;
                }
                */
            }
        return NODE_ACCESS_IGNORE;
    }
}

/**
 * Implements hook_views_api()
 */
function shanti_images_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'shanti_images') . '/includes/views',
        'template path' => drupal_get_path('module', 'shanti_images') . '/includes/views/theme',
    );
}

/**
 * Adds css and  js files for the shanti image list view
 *
 * @param $vars
 */
function shanti_images_preprocess_views_view(&$vars) {
    global $base_path;
    if ($vars['view']->name == 'shanti_image_list_view') {
        $me = $base_path . drupal_get_path('module', 'shanti_images');
        drupal_add_css($me . '/css/shanti-image-list-view.css', 'external');
        drupal_add_js($me . '/js/shanti-image-list-view.js', 'file');
    }
}


/**
 * Returns the markup for a carousel underneath a main image
 *
 * @param $nid
 *
 * @return string markup to insert through ajax
 */
function shanti_images_get_node_carousel($nid) {
    if (empty($nid)) { return '<div id="fscarousel" class="hidden"></div>'; }
    $num_of_sibs = 30;
    $halfnum = intval($num_of_sibs / 2);
    $coll = shanti_collections_get_collection($nid); // Get node's collection
    $markup = '';
    $data_att = '';
    // Only create carousel if image is part of a collection
    if ($coll) {

        $nids = _shanti_images_get_coll_node_ids($coll);  // in shanti_images.inc for cached function

        // Find the index of the current node id or if not found, use 1/2
        $myind = array_search($nid, $nids);
        if (!$myind) { $myind = intval(count($nids) / 2); }
        // Get the slice of nodes around current node based on num of sibs above
        $stind = $myind - $halfnum;
        if ($stind < 0) { $stind = 0; }
        $sibids = array_slice($nids, $stind, $num_of_sibs);
        // Reset the myind to be the index of the sliced array
        $myind = array_search($nid, $sibids);
        if (!$myind) { $myind = $halfnum; }
        $thmbst = $myind - $halfnum;
        if ($thmbst < 0 ) { $thmbst = 0; }

        // Create the markup for the carousel
        $data_att .= ' data-start="' . $thmbst . '"';
        $data_att .= ' data-collid="' . $coll->nid . '"';
        $carousel_slides = '<ul class="slides">' . _shanti_images_get_carousel_slides($sibids, $thmbst, $num_of_sibs, $nid) . '</ul>';
        $markup = '<div id="fscarousel" class="flexslider fscarousel"' . $data_att . '>' . $carousel_slides . '</div>';

    } else {
        // TODO: what to do if the node has no collection. Show carousel based on the homepage?
        // Hiding carousel if there is no collection for node
        $markup = '<div id="fscarousel" class="flexslider fscarousel hidden nodata" style="display: none; visibility: hidden;"></div>';
    }

    print $markup;
}

function _shanti_images_get_carousel_slides($slideids, $startslide, $num_of_slides, $current = FALSE) {
    global $base_url;
    $carousel_slides = '';
    $is_dev = (strstr($base_url, '.dd') || strstr($base_url, '-dev')) ? TRUE : FALSE;
    $items = array_slice($slideids, $startslide, $num_of_slides);
    if (!empty($items)) {
        //$items = node_load_multiple($items);  // Turn list of nids into node objects
        // Process list of node objects into gallery item objects per specifications above
        foreach($items as $nid) {
            $si = _shanti_images_get_node_image($nid);
            //$rotate = (!empty($si->rotation)) ? (360 - $si->rotation) % 360 : 0;
            $url = $si->getCropped(90, 65, $si->rotation);
            // use prod server when on DEV but looking for images on prod
            if ($is_dev && preg_match('/shanti-image(-stage)?-\d+/', $si->getIIIFName())) {
                $url = str_replace('-test', '', $url);
            }
            $ipath = trim($si->path);
            if (substr($ipath, 0, 1) !== '/' && strpos($ipath, 'http') !== 0) { $ipath = '/' . $ipath; }
            $classes = array();
            if ($current && $nid == $current) { $classes[] = 'flex-active-slide'; }
            if ($si->rotation / 90 % 2) { $classes[] = 'portrait'; }
            $class = (!empty($classes)) ? ' class="' . implode(' ', $classes) . '"' : '';
            $carousel_slides .= "<li$class><a href=\"{$ipath}\"><img src=\"$url\" onerror=\"jQuery(this).fadeOut();\"/></a></li>";
        }
    }
    return $carousel_slides;
}

/**
 * Get further slides for the carousel based on the parameters
 *
 * @param $collid
 * @param $st
 * @param $num
 */
function shanti_images_get_more_slides($collid, $st, $num) {
    $markup = '<p>Collection Not Found</p>';
    $coll = node_load($collid); // Get node's collection
    if ($coll) {
        $sibids = shanti_collections_get_items_in_collection($coll, 'nids');
        if ($st > count($sibids)) {
            $markup = 'END';
        } else {
            $markup = _shanti_images_get_carousel_slides($sibids, $st, $num);
        }
    }
    print $markup;
}

 /**
  * Implements hook_cron to
  *
  */
 function shanti_images_cron() {
     // Add IIIF server to security kit settings if missing
     $iiif_view_url = variable_get('shanti_images_view_url', FALSE);
     if ($iiif_view_url) {
        $xss =variable_get('seckit_xss');
        $def_src = $xss['csp']['default-src'];
        if (!strstr($def_src, $iiif_view_url)) {
            $def_src .= " $iiif_view_url";
            $xss['csp']['default-src'] = $def_src;
            variable_set('seckit_xss', $xss);
        }
     }

     // Remove images uploaded to IIIF when their waiting period has expired
     if (variable_get('shanti_images_cron', FALSE)) {
         // Get Shanti Image setting for file age past which to delete
         $minage = variable_get('shanti_images_cron_age', FALSE);
         $unit = str_replace('(s)', '', variable_get('shanti_images_cron_unit', "hour(s)"));
         $batch_size = variable_get('shanti_images_cron_batch_size', 10);

         if ($minage) {
             // convert age to timestamp from now
             $minage = "-{$minage} {$unit}";
             $ago = strtotime($minage);
             // Find the batch size number of shanti-image nodes with a file that is older than the expunge limit
             $res = db_select('shanti_images', 'si')
                 ->fields('si', array('nid'))
                 ->condition('fid', 0, '>')->condition('created', $ago, '<')
                 ->orderBy('siid', 'asc')->range(0, $batch_size)
                 ->execute();
             $nids = $res->fetchCol();
             $nodes = node_load_multiple($nids);
             $ct = 0;
             foreach ($nodes as $nd) {
                 $fid = $nd->field_image[LANGUAGE_NONE][0]['fid'];
                 $fn = $nd->field_image[LANGUAGE_NONE][0]['filename'];
                 watchdog('shanti_images', "Expunging image attached to node ({$nd->nid}): {$fn} ({$fid})");
                 // call the expunge function and update count if successful
                 if(_shanti_images_expunge_image_file($nd)) {  $ct++; }
             }
             if ($ct > 0) {
                 watchdog('shanti_images',
                         t("@count files expunged from site because they are stored on IIIF server.",
                         array('@count' => $ct)));
             }
         }
     }
 }

/**
 * Implementing hook_libraries_info()
 */
 function shanti_images_libraries_info() {
    // Expected to be extracted into 'sites/all/libraries/flexslider'.
    $libraries['flexslider'] = array(
        'name' => 'FlexSlide',
        'vendor url' => 'http://flexslider.woothemes.com/',
        'download url' => 'https://github.com/woothemes/FlexSlider/zipball/master',
        'version arguments' => array(
            'file' => 'jquery.flexslider.js',
            'pattern' => '/ jQuery FlexSlider v(\d+\.\d+\.?\d*)/',
            'lines' => 5,
        ),
        'files' => array(
            'js' => array('jquery.flexslider.js'),
            'css' => array('flexslider.css'),
        ),
    );
    $libraries['columnizer'] = array(
        'name' => 'Columnizer',
        'vendor url' => 'https://welcome.totheinter.net/columnizer-jquery-plugin/',
        'download url' => 'https://github.com/adamwulf/Columnizer-jQuery-Plugin/archive/master.zip',
        'version arguments' => array(
            'file' => 'src/jquery.columnizer.js',
            'pattern' => '/version (\d+\.\d+\.?\d*)/',
            'lines' => 5,
        ),
        'files' => array(
            'js' => array('src/jquery.columnizer.js'),
        ),
    );
    return $libraries;
}

 /**
  * Form Functions Section
  */

 /**
  * Form Alter Functions
  * Starting with the general form alter
  * @param $form
  * @param $form_state
  * @param $form_id
  */
 function shanti_images_form_alter(&$form, &$form_state, $form_id)
 {
     // Media Internet Add Upload (Adds css)
     if ($form_id == 'media_internet_add_upload') {
         drupal_add_css(drupal_get_path('module', 'shanti_images') . '/css/shanti-image-media-browser.css', array('group' => CSS_THEME));


     } elseif ($form_id == 'shanti_image_node_form') {
         global $base_path;
         $cp = current_path();
         $url = ($form['nid']['#value']) ? $base_path . drupal_get_path_alias("node/{$form['nid']['#value']}") :
             $base_path;
         if (!strstr($cp, '/add/')) {
             /*dpm($form);
             $ltxt = t('View without saving');
             $msg = t('Back to viewing the image without saving changes made here');
             $form['#prefix'] = '<a href="' . $url . '" title="' . $msg . '" class="backarrow"><span class="icon shanticon-arrow-left_2"></span> ' . $ltxt . '</a>';
             */
             if (!isset($form['actions']['cancel'])) {
                 $form['actions']['cancel'] = array(
                     '#type' => 'submit',
                     '#class' => 'form-cancel',
                     '#value' => t("Cancel"),
                     '#weight' => 13,
                     '#submit' => array('shanti_images_edit_form_cancel'),
                 );
             }
         }
     }

     /* Unnecessary to confirm IIIF delete
     // Shanti Image Node Delete Confirm Form
     else if ($form_id == 'node_delete_confirm' && $form['#node']->type == 'shanti_image') {
         $pref = '';
         $suff = '';
         if (!user_has_role(3)) {
             $pref = '<div class="hidden">';
             $suff = '</div>';
         }
         $form['delete_iiif'] = array(
             '#type' => 'checkbox',
             '#title' => t("Remove image from the IIIF server?"),
             '#description' => t('Checking this box will remove the image that has been uploaded to the <a href="@serv" target="_blank">IIIF server</a>',
                 array(
                     '@serv' => variable_get('shanti_images_view_url', 'https://iiif.lib.virginia.edu'),
                 )),
             '#default_value' => TRUE,
             '#prefix' => $pref,
             '#suffix' => $suff,
         );
         array_unshift($form['#submit'], 'shanti_images_delete_confirm_submit');
         //dpm($form, 'the delete confirm form');
     }
     */
 }

 function shanti_images_edit_form_cancel(&$form, &$form_state) {
     $nid = $form['#node']->nid;
     $path = drupal_get_path_alias("node/{$nid}");
     drupal_goto($path);
 }

/**
 * Form Alter method for Shanti Image Node Form
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
 function shanti_images_form_shanti_image_node_form_alter(&$form, &$form_state, $form_id) {
     // Shanti Image Node Form
     // Image edit form
     //dpm($form, 'form var');
     //dpm($form['#fieldgroups']['group_image_info']);
     global $base_url;
     $fnid = (isset($form_state['node']->nid)) ? $form_state['node']->nid : FALSE;
     $siobj = ($fnid) ? _shanti_images_get_node_image($form_state['node']->nid) : FALSE;
     $flang = $form['field_image']['#language'];
     if (!empty($form['field_image'][$flang][0]['#description'])) {
         $form['field_image']['#prefix'] = $form['field_image'][$flang][0]['#description'];
         unset($form['field_image'][$flang]['#description'],$form['field_image'][$flang][0]['#description']);
     }

     // Add bootbox for field delete confirmation to any node forms also added in av node forme function
     if (strpos($form_id, 'node_form')) {
         drupal_add_js('sites/all/themes/shanti_sarvaka/js/inc/other/bootbox.min.js', 'file');
     }

     // If it exists, insert IIIF image and ability to Delete.
     if ($siobj && $siobj->imageExists()) {
         #dpm($form['field_image'][LANGUAGE_NONE][0]['#entity'], 'form image field entity');
         #dpm($form_state, 'form state');
         $img_url = $siobj->getURL(400);

         $form['image_pane'] = array(
             '#type' => 'fieldset',
             '#title' => $form_state['node']->title ,
             '#prefix' => '<div id="image-ajax-replace">',
         );
         $i3info = '<div class="image-iiif-info clearfix">';
         $i3info .= '<span class="label">Original Filename: </span>' . $siobj->filename . '<br/>';
         $i3info .= '<span class="label">Image URL: </span><a class="imgurl" href="' . $img_url .
             '" target="_blank">' . $img_url . '</a><br/>';
         if (!empty($siobj->fid)) {
             $i3info .= '<span class="label">FID: </span>' . $siobj->fid . '<br/>';
         }
         $i3info .= '<span class="label">Width: </span>' . $siobj->width . '<br/>';
         $i3info .= '<span class="label">Height: </span>' . $siobj->height . '<br/>';
         $i3info .= '<span class="label">Rotation: </span>' . $siobj->rotation . '<br/>';
         $form['image_pane']['image'] = array(
             '#markup' => '<div class="image-placeholder-wrapper"><div class="image-placeholder">' .
                    '<img src="' . $img_url . '" />' .
                    '<div class="image-placeholder-desc">' . t('This is the image currently uploaded to the server') .
                    '</div></div>' . $i3info . '</div>',
         );

         $form['image_pane']['replace_link'] = array(
             '#type' => 'button',
             '#value' => t('Replace Image'),
             '#ajax' => array(
                 'callback' => '_shanti_images_remove_callback',
                 'wrapper' => 'image-ajax-replace',
                 'method' => 'replace',
                 'effect' => 'fade',
             ),
         );

         // If it's a prod image on one of the other servers, don't allow to replace
         if (preg_match('/(-dev)|(-stage)|(.dd)/', $base_url)) {
             if (preg_match('/shanti-image-\d+/', $siobj->i3fid)) {
                 $form['image_pane']['replace_link'] = array(
                     '#type' => 'markup',
                     '#markup' => t('<div class="image-info-msg clearfix">(<em>This image can only be replaced from the production site</em>s)</div>'),
                 );
             }
         }
         array_unshift($form['#groups']['group_image_info']->children, 'image_pane');
         array_unshift($form['#fieldgroups']['group_image_info']->children, 'image_pane');
         $form['#group_children']['image_pane'] = 'group_image_info';

         $form['field_image']['#prefix'] = '<div id="image-field-div" style="display: none;">';
         $form['field_image']['#suffix'] = '</div></div>'; // Second closing is for #image-ajax-replace
     }

     $valid_ext = variable_get('shanti_images_extensions', 'jpg jpeg jp2 png tif tiff');
     foreach(element_children($form['field_image'][$flang]) as $n) {
        $form['field_image'][$flang][$n]['#upload_validators']['file_validate_extensions'][0] = $valid_ext;
     }
     if (!empty($form['field_image'][$flang]['#file_upload_description'])) {
         $form['field_image'][$flang]['#file_upload_description'] = str_replace(
             'jpg jpeg png', $valid_ext,
             $form['field_image'][$flang]['#file_upload_description']
         );
     }

     // Change add button for Descriptions
     $form['field_image_descriptions']['und']['actions']['ief_add']['#value'] = t('Add new description');
     $form['field_image_descriptions']['und']['form']['actions']['ief_add_save']['#value'] = t('Create description');

     // Change add series button
     $form['field_image_series']['und']['add_more']['#value'] = t('Add a series');

     // External classification button
     $form['field_external_classification']['und']['actions']['ief_add']['#value'] = t('Add new classification');

     // Image Agents
     $form['field_image_agents']['und']['actions']['ief_add']['#value'] = t('Add new agent');
     $form['field_image_agents']['und']['form']['actions']['ief_add_save']['#value'] = t('Create agent');

     // Notes Add buttons
      $form['field_admin_notes']['und']['add_more']['#value'] =
          $form['field_admin_notes']['und']['add_more']['#value'] =
          $form['field_classification_notes']['und']['add_more']['#value'] =
          $form['field_image_notes']['und']['add_more']['#value'] =
          $form['field_origin_notes']['und']['add_more']['#value'] =
          $form['field_rights_notes']['und']['add_more']['#value'] =
          $form['field_technical_notes']['und']['add_more']['#value'] = t('Add a note');
      // Insert License title in form
      $license_url = $form['field_license_url']['und'][0]['value']['#default_value'] ;
      $ltitle = shanti_images_get_license_title($license_url);
      $form['field_license_url']['und'][0]['value']['#suffix'] = '<div><strong>License: </strong>' . $ltitle . '</div>' . $form['field_license_url']['und'][0]['value']['#suffix'];
 }

/**
 * Custom confirm delete submit function to check if IIIF image should be deleted and delete it
 *
 * @param $form
 * @param $form_state
 */
/* Removed because unnecessary
function shanti_images_delete_confirm_submit($form, &$form_state) {
    if ($form_state['values']['confirm']) {
        if ($form_state['values']['delete_iiif']) {
            $si = _shanti_images_get_node_image($form_state['values']['nid']);
            _shanti_images_remove_iiif_image($si->getIIIFName());
        }
    }
}
*/

function shanti_images_get_license_title($license_url) {
    if (!empty($license_url) && strstr($license_url, 'http')) {
      $ltitle = FALSE;
      $lictext = shanti_file_get_contents($license_url);
      if (!empty($lictext)) {
          if (preg_match('/<title>([^<]+)<\/title>/', $lictext, $mtchs)) {
            $ltitle = $mtchs[1];
          } else {
              $pts = explode("\n", $lictext);
              foreach ($pts as $n => $pt) {
                  if (!empty($pt)) {
                      $ltitle = $pt;
                      break;
                  }
              }
          }
      }
      return str_replace('&amp;', '&', $ltitle);
    }
    return FALSE;
}

 /**
  * Node Functions
  */

  /**
   * Validation for a Shanti Image node
   *  Change message for missing agent
   */
  function shanti_images_node_validate($node, $form, &$form_state) {
      $err = form_get_errors();
      $ernm = 'field_image_agents][und][form][title';
      if (!empty($err) && isset($err[$ernm])) {
          unset($err[$ernm]);
          form_clear_error();
          $ermsg= t('There must be at least one creator defined for each image');
          form_set_error($ernm, $ermsg);
          foreach($err as $ernm => $ermsg) {
              form_set_error($ernm, $ermsg);
          }
      }
      $ernm = 'field_image_descriptions][und][form][title';
      if (!empty($err) && isset($err[$ernm])) {
          form_clear_error();
          $newmsg = t('All image descriptions must have at least a caption.');
          form_set_error($ernm, $newmsg);
          foreach($err as $ernm => $ermsg) {
              form_set_error($ernm, $ermsg);
          }
          // Open the appropriate accordion
          drupal_add_js('jQuery(document).ready(function() { jQuery(\'#accordionedit-group_images h6 a\').click() });', 'inline');
      }
  }

 /**
  * Implements hook_preprocess_node
  *
  *     Adds the Drupal setting settings.shanti_images.addimages which if not empty triggers the uploading of
  *     images to the IIIF server in shanti_images.js behavior Drupal.behaviors.shanti_images_add_images
  */
 function shanti_images_preprocess_node(&$vars) {
     if ($vars['type'] == "shanti_image") {
         //dpm($vars, 'vars in pp node');
         // Add view mode to classes

         $vars['classes_array'][] = $vars['view_mode'];

          // Get IIIF urls and add to vars
         $node = $vars['node'];
         $ew = entity_metadata_wrapper('node', $node);
         $rotation = $ew->field_image_rotation->value(); // was (360 - $ew->field_image_rotation->value()) % 360;
         //$fids = _shanti_images_get_node_files($node, TRUE);
         $nimgs = array(_shanti_images_get_node_image($node->nid));
         $urls = array();
         $genurls = array();
         $ratios = array();
         // Add image info to each array
         foreach ($nimgs as $nimg) {
             $url = $nimg->getInfoURL();
             $urls[] = shanti_images_fix_prod_urls($url, $nimg->getIIIFName());
             $genurl = $nimg->getURL('__W__', '__H__', $rotation);
             $genurls[] = shanti_images_fix_prod_urls($genurl, $nimg->getIIIFName());
             $ratios[] = $nimg->getRatio();
         }

         // Need placeholders in each array even if there is no image associated with them
         if (count($nimgs) == 0) {
           $urls[] = '';
           $genurls[] = '';
           $ratios[] = '';
         }

         $vars['shanti_images_urls'] = implode('|$|', $urls);
         $vars['shanti_images_rotation'] = $rotation;
         // Gen urls are for lightbox popup
         $vars['shanti_images_ratios'] = $ratios;
         $vars['shanti_images_genurls'] = $genurls;
         // Add the info to the drupal JS settings array
         $settings = array('shanti_images' => array(
                'genurls' => $genurls,
                'infourls' => $urls,
                'imgratios' => $ratios,
                'rotation' => $rotation,
          ));

         // If there are new or updated images, then add these to the settings (see _shanti_images_process_image_files
         // which is called from both hook_node_insert and _update so they can be pushed to the IIIF server
         // through AJAX call See shanti_images.js Drupal.behaviors.shanti_images_add_images
         if (variable_get('shanti_images_debug', FALSE)) {
             watchdog('shanti image', "Session: " . json_encode($_SESSION));
         }
         $images_to_add = (!empty($_SESSION['image_files_to_add'])) ? $_SESSION['image_files_to_add'] : FALSE;
         if ($images_to_add) {
             $settings['shanti_images']['addimages'] = $images_to_add;
             $_SESSION['image_files_to_add'] = FALSE;
         }


          drupal_add_js($settings, 'setting');

         // Agent name
         if (isset($vars['field_image_agents'][0]['entity'])) {
             $vars['creator'] = $vars['field_image_agents'][0]['entity']->title;
         } else {
             $vars['creator'] = t('Unknown');
         }

         // Add pixel dims of first image to vars
         //dpm($vars, 'vars in pp node');
         /*
         $img = FALSE;
         if (isset($vars['field_image']['und'][0])) {
             $img = $vars['field_image']['und'][0];
         } else if (isset($vars['field_image'][0])) {
             $img = $vars['field_image'][0];
         }
         /*
          *  TODO: Remake Pixel Field that is automatically populated on normal image node creation but can be overridden,
          *             e.g. for MMS import
          *
         if ($img) {
            $vars['pixels'] = $img['width'] . 'x' . $img['height'];
         }
         */
         $vars['pixels'] = $nimgs[0]->getDimensions(TRUE);
     }
 }

 /**
  * Implements hook_node_view
  */
 function shanti_images_node_view($node, $view_mode, $langcode) {

    switch ($node->type) {
        case 'shanti_image':
            _shanti_images_image_view($node, $view_mode, $langcode);
            break;

        case 'image_descriptions':
            _shanti_images_desc_view($node, $view_mode, $langcode);
            break;
    }
 }

/**
 * Whenever a shanti_image node is loaded add i3ffiles array
 */
/*
function shanti_images_node_load($nodes, $types) {
    if (in_array('shanti_image', $types)) {
        foreach($nodes as &$node) {
            if ($node->type == 'shanti_image') {
                $qry = 'SELECT i3fid FROM `shanti_images` WHERE nid=' . $node->nid . ';';
                $res = db_query($qry);
                $res = $res->fetchCol();
                if (!empty($res)) {
                    $node->i3ffiles = $res[0];
                }
            }
        }
    }
}
*/
 /**
  * Function to deliver an embeddable div without Drupal page wrappers for any node
  *
  * @param $nid
  *
  * @param $view_mode
  */
function shanti_images_node_embed($nid, $view_mode='full') {
    $node = node_load($nid);
    $build = node_view($node, $view_mode);

    if ($node->type == 'image_descriptions') {
        // For image descriptions return a modal dialog box content. See shanti_images.js for the behavior attached to '.desc.morelink'
        $author =  (!empty($build['field_image_agents'][0]['#markup'])) ? $build['field_image_agents'][0]['#markup'] : FALSE;
        $out = '<div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
              <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"></h4>';
        if ($author) {
            $out .= '<h5>' . t('By') . '&nbsp;' . $author . '</h5>';
        }
        $out .= '</div>
              <div class="modal-body">'
                . str_replace('<h2', '<h2 style="display: none;"', $build['field_description'][0]['#markup']) .
              '</div>
              <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
              </div>
            </div>';
        print $out;

    } else if ($node->type == 'shanti_image') {
        print render($build);
    }
}

/**
 * Function to deliver the data about a node in JSON format
 *
 * @param $nid
 */

 function shanti_images_node_json($nid) {
    // Load noad or quit
    $node = node_load($nid);
    if ($node) {
        // Iterate through entity reference fields and load those nodes into the object
        $entity_fields = array('field_image_agents', 'field_image_descriptions', 'field_external_classification');
        foreach ($entity_fields as $n => $efn) {
            $field = &$node->{$efn}; // Get the field in the node and iterate through its items
            foreach ($field['und'] as $n => $auth) {
                $auth = node_load($auth['target_id']); // Load entity references
                $field['und'][$n] = $auth;                     // Add full entity to node record
            }
        }
        drupal_json_output($node); // Convert to JSON and output
    }
}

/**
 * Function to deliver a thumbnail for a Shanti image
 * API call from hook_menu
 * Returns default 200 x 200 thumbnail
 *
 * @param $nid
 */
function shanti_images_node_thumb($nid) {
    $dbrec = _shanti_images_get_record($nid, 'nid');
    $img_url = _shanti_images_build_IIIFURL($dbrec->i3fid, 200, 200);
    drupal_goto($img_url);
}

/**
 * Return JSON for a record in the shanti images table given an id and column name
 *
 * @param $imgid : The id
 * @param $col   : The column identifier
 *
 * @return JSON Output
 */
function shanti_images_info_api($imgid, $col='mmsid') {
    $infout = array('status' => 401);
    $sischema = drupal_get_schema('shanti_images');
    $fnms = array_keys($sischema['fields']);
    if (in_array($col, $fnms)) {
        $si = _shanti_images_get_record($imgid, $col);
        if (!empty($si)) {
            //if (!empty($si->))
            drupal_json_output($si);
            return;
        }
    }
    // Else not found
    http_response_code(404);
}

/**
 * Function to return the IIIF file name for a given MMS ID
 * API call from hook_menu
 */
function shanti_images_get_mms_filename($mmsid) {
    header('Content-Type: text/plain');
    $out = 'FALSE';
    if (is_numeric($mmsid)) { $mmsid = 'mms-' . $mmsid; }
    $qry = "select entity_id from field_data_field_other_ids  where field_other_ids_value = '$mmsid';";
    $res = db_query($qry);
    $res = $res->fetchCol();
    if (!empty($res)) {
        $si = _shanti_images_get_node_image($nid);
        if ($si) {
            $out = $si->getIIIFName();
        }
    }
    print $out;
}

/**
 * Given a particular MMS ID redirect to the Drupal node page if it exists
 *
 * @param $mmsid
 */
function shanti_images_mms_lookup($mmsid) {
    $si = _shanti_images_get_record($mmsid, 'mmsid');
    if ($si && !empty($si->nid)) {
        $alias = drupal_get_path_alias('node/' . $si->nid);
        drupal_goto($alias);
    } else {
        drupal_not_found();
    }
}

/**
 * Given a particular Shanti Image ID redirect to the Drupal node page if it exists
 *
 * @param $siid
 */
function shanti_images_siid_lookup($siid) {
  $si = _shanti_images_get_record($siid, 'siid');
  if ($si && !empty($si->nid)) {
    $alias = drupal_get_path_alias('node/' . $si->nid);
    drupal_goto($alias);
  } else {
    drupal_not_found();
  }
}

/**
 * Function to pipe an image through the site so it is the same URL
 *
 * @param $imgnm
 * @param $width
 */
function shanti_images_image_download($imgnm, $width) {
    $imgurl = _shanti_images_build_IIIFURL($imgnm, $width);
    $fp = fopen($imgurl, 'rb');
    if ($fp)  {
            header('Content-Type:image/jpeg');
            fpassthru($fp);
            exit;
    }
}

 /**
  * Implements hook_node_insert
  */
 function shanti_images_node_insert($node) {
    //module_load_include('inc', 'shanti_images', 'includes/shanti_images');

    if ($node->type == 'shanti_image') {
       $files_to_add = _shanti_images_process_image_files($node);
       if (!empty($files_to_add)) {
           if (variable_get('shanti_images_debug', FALSE)) {
               watchdog('shanti image', "Files to add (insert): " . json_encode($files_to_add));
           }
           $_SESSION['image_files_to_add'] = $files_to_add;
       }
    } elseif ($node->type == 'image_agent') {
        _shanti_image_process_dates($node);
    }
 }

 /**
  * Implements hook_node_update
  */
 function shanti_images_node_update($node) {
     //module_load_include('inc', 'shanti_images', 'includes/shanti_images');
     if ($node->type == 'shanti_image') {
        $files_to_add = _shanti_images_process_image_files($node);
        if (!empty($files_to_add)) {
            if (variable_get('shanti_images_debug', FALSE)) {
                watchdog('shanti image', "Files to add (update): " . json_encode($files_to_add));
            }
            $_SESSION['image_files_to_add'] = $files_to_add;
        }
     } elseif ($node->type == 'image_agent') {
         _shanti_image_process_dates($node);
     }
 }

/**
 *  Implements hook_node_delete
 *     Uses the Shanti Image class object to remove record from Shanti Images table
 *     IIIF image is deleted in shanti_images_delete_confirm_submit()
 *
 * @param $node
 */
 function shanti_images_node_delete($node) {
    if ($node->type == 'shanti_image') {
        $siobj = _shanti_images_get_node_image($node);
        if ($siobj) {
            _shanti_images_remove_iiif_image($siobj->getIIIFName());
            _shanti_images_delete_record($siobj->getID());
        }
    }
 }

/**
 * Implements hook_file_insert to replace periods in file names with dashes
 */
function shanti_images_file_insert($file) {
    if (substr_count($file->uri, '.') > 1) {
        $uripts = explode('.', $file->uri);
        $ext = array_pop($uripts);
        $dest = implode('-', $uripts) . '.' . $ext;
        if ($dest != $file->uri) {
            $success = file_move($file, $dest);
            if (!$success) {
                drupal_set_message(t("Could not rename file to replace periods (shanti_images_file_insert", 'warning'));
            }
        }
    }
}

function shanti_images_upload_iiif_callback($nid, $fid, $sid) {
  $out = shanti_images_upload_iiif($nid, $fid, $sid);
  drupal_json_output($out);
}

/**
 * Function to upload image to IIIF server
 */
function shanti_images_upload_iiif($nid, $fid, $sid) {
    if (variable_get('shanti_images_debug', FALSE)) {
        watchdog('shanti_images upload DEBUG', "nid: $nid, fid: $fid, sid: $sid");
    }
    $siobj = new ShantiImage($sid, $nid);
    $file = file_load($fid);
    $siobj->fid = $fid;
    $siobj->filename = $file->filename;
    $res = _shanti_images_do_upload_to_iiif($file, $siobj->getIIIFName());
    if(!$res) {
      return;
    }
    $url = $siobj->getURL(800);
    $out = array('src' => $url);
    if (variable_get('shanti_images_debug', FALSE)) {
        watchdog("shanti_images upload", "New Url: $url");
    }
    $res = _shanti_images_update_table_from_image($siobj);
    if (!$res) {
        watchdog('shanti_images upload', "Could not update database table from image object: " . json_encode($siobj));
        return;
    }
    return $out;
}

// Inline entity forms
function shanti_images_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
    if ($entity_form['#bundle'] == 'image_agent') {
        //dpm($entity_form, 'agent entity form');
        $entity_form['#title'] = t('Add new agent');
    }
}

/**** Theming *******/

/**
 * Implements hook_inline_entiy_form_fields_alter: Adding fields to inline entity form tables
 */
 function shanti_images_inline_entity_form_table_fields_alter(&$fields, $context) {
    // IEF is managing products on a node form.
    // For Image Descriptions
    if ($context['field_name'] == 'field_image_descriptions') {
        $fields['field_summary'] = array(
            'type' => 'property',
            'label' => t('Summary'),
            'weight' => 5,
        );
        $fields['field_language'] = array(
            'type' => 'property',
            'label' => t('Language'),
            'weight' => 10,
        );
        $fields['field_author'] = array(
            'type' => 'property',
            'label' => t('Author'),
            'weight' => 15,
        );
    }
    if ($context['field_name'] == 'field_image_agents') {
        unset($fields['status']);
        $fields['field_agent_role'] = array(
            'type' => 'property',
            'label' => t('Role'),
            'weight' => 5,
        );
        $fields['field_agent_dates'] = array(
            'type' => 'field',
            'label' => t('Dates'),
            'formatter' => 'date',
            'settings' => array(
                'format_type' => 'custom',
                'custom_date_format' => 'M j, Y',
            ),
            'weight' => 10,
        );
        $fields['field_agent_place'] = array(
            'type' => 'property',
            'label' => t('Place'),
            'weight' => 15,
        );
    }
/*
     if ($context['field_name'] == 'field_external_classification') {
        $fields['field_external_class_scheme'] = array(
            'type' => 'property',
            'label' => t('Scheme'),
            'weight' => 5,
        );
        $fields['field_external_class_id'] = array(
            'type' => 'property',
            'label' => t('ID'),
            'weight' => 10,
        );
    }*/
}

/**
 * Implementing hook_fileurl_for_grid from shanti_grid_view module to deal with old Shared Shelf file images
 */
function shanti_images_fileurl_for_grid($fid, $size) {
    global $base_root, $base_path;
    $size = str_replace(',', '', $size);
    $size = is_numeric($size) ? intval($size) : 250;
    $sizestr = ($size > 499) ?  'media_lightbox_large' : 'media_thumbnail';
    $url = $base_root . $base_path . 'sites/images/files/styles/' . $sizestr . '/public/media-sharedshelf/a/__SSID__.jpg';
    $file = file_load($fid);
    $ssid = $file->field_sharedshelf_ssid['und'][0]['value'];
    $url = str_replace('__SSID__', $ssid, $url);
    return $url;
}

/**
 * Implements hook_entity_view for file display
 */
function shanti_images_entity_view($entity, $type, $view_mode, $langcode) {
    if ($type == 'file' && $view_mode == 'grid_details') {
        // Shorten length of ss fields showing in drop down
         $ssfields = $entity->ssfields;
         $pts = explode('<div class="field field-name-images-included',$ssfields);
         $entity->ssfields = $pts[0];
    }
}

/**
 * Lets modules alter the search results returned from a Solr search.
 *
 * @param array $results
 *   The results array that will be returned for the search.
 * @param SearchApiQueryInterface $query
 *   The SearchApiQueryInterface object representing the executed search query.
 * @param object $response
 *   The Solr response object.
 */
function shanti_images_search_api_solr_search_results_alter(array &$results, SearchApiQueryInterface $query, $response) {
   // dpm($results, 'search results');
}

/**
 * Implements hook_kmaps_fields_solr_doc_alter to change the doc sent to the solr KM asset index.
 *   Called from _shanti_kmaps_fields_get_solr_doc in shanti_kmaps_fields.module line 483
 *   Goes through entity references assigned in the Solr index field mapping on the Shanti Image content type page
 *   Turns NIDs into text strings for agents and descriptions
 **/
    function shanti_images_kmaps_fields_solr_doc_alter(&$solrdoc) {
   foreach ($solrdoc as $m => &$sdoc) {
       // Do Agents
       // Assign the Agent node references to the creator in the set up page /admin/structure/types/manage/shanti_image
       $mainagent = FALSE;
        // TODO: handle multiple agents. Right now only doing first one as creator
       if (!empty($sdoc['mynode']->field_image_agents['und'])) {
          $aid = $sdoc['mynode']->field_image_agents['und'][0]['target_id'];
          $anode = node_load($aid);
          if ($anode) {
            $sdoc['creator'] = $anode->title;
            $mainagent = $anode;
          }
       }

       // Do Caption and Summary
       // TODO: Deal with multiple descriptions and those in different languages
       $maindesc = FALSE;
       if (!empty($sdoc['mynode']->field_image_descriptions[LANGUAGE_NONE])) {
           $descid = $sdoc['mynode']->field_image_descriptions[LANGUAGE_NONE][0]['target_id'];
           $descnode = node_load($descid);
           $maindesc = $descnode;

           // Deal with Language
           if (!empty($maindesc->field_language)) {
               $sdoc['node_lang'] = $maindesc->field_language[LANGUAGE_NONE][0]['header'];
           }

           $sdoc['caption'] = $descnode->title;
           if (!empty($descnode->field_summary[LANGUAGE_NONE][0]['safe_value'])) {
             $sdoc['summary'] = $descnode->field_summary[LANGUAGE_NONE][0]['safe_value'];
           }

       }

       // Do Dates, use date with first agents
       // TODO: Do we need to make sure agent is explicitly photographer?
       if (!empty($mainagent->field_agent_dates)) {
           // If date exists in first agent, convert PHP date string to SOLR acceptible date string
           $ds = $mainagent->field_agent_dates['und'][0]['value'];
           $sdoc['date_start'] = date('Y-m-d\TH\:i\:s\Z', strtotime($ds));
       } else {
           unset($sdoc['date_start']);
       }



       // Deal with Thumb url (need to return the iiif url so mandala kmaps sites can deal with it)
       $siimg = _shanti_images_get_node_image($sdoc['id']);
       if (is_object($siimg)) {
           $img_url = $siimg->getURL(200, 200);
           $img_size = $siimg->getDimensions();
           if ($img_size['width'] > $img_size['height']) {
              $thumbwidth = 200;
              $thmbheight = floor(200 / $siimg->getRatio());
           } else {
             $thmbheight = 200;
             $thumbwidth = floor(200 * $siimg->getRatio());
           }
           $sdoc['url_thumb'] = $img_url;
           $sdoc['url_thumb_width'] = "{$thumbwidth}";
           $sdoc['url_thumb_height'] = "{$thmbheight}";
           $sdoc['url_thumb_size'] = "30000";
           $sdoc['img_width_s'] = $img_size['width'];
           $sdoc['img_height_s'] = $img_size['height'];
       } elseif (variable_get('shanti_images_debug', FALSE)) {
           watchdog('shanti_images', "Cannot get shanti image record for node {$sdoc['id']}");
       }
   }
    // Remove any solrdocs that have -none/ in their thumb_url
    // TODO: Add to cron task to try and reindex ???
    foreach ($solrdoc as $m => &$sdoc) {
        if (strstr($sdoc['url_thumb'], '-none/')) {
            unset($solrdoc[$m]);
        }
    }
}


/**
 * Alter path aliases so they do not include diacrtics, as this breaks urls in Safari and maybe elsewhere
 * TODO: Should this be moved to a more global place so it applies to all apps?
 */
function shanti_images_pathauto_alias_alter(&$alias, array &$context) {
    $table = array(
        'Š'=>'S', 'š'=>'s', 'Đ'=>'Dj', 'đ'=>'dj', 'Ž'=>'Z', 'ž'=>'z', 'Č'=>'C', 'č'=>'c', 'Ć'=>'C', 'ć'=>'c',
        'À'=>'A', 'Á'=>'A', 'Â'=>'A', 'Ã'=>'A', 'Ä'=>'A', 'Å'=>'A', 'Æ'=>'A', 'Ā' => 'A',
        'Ç'=>'C',
        'Ḍ' => 'D',
        'È'=>'E', 'É'=>'E', 'Ê'=>'E', 'Ë'=>'E', 'Ē' =>'E',
        'Ì'=>'I', 'Í'=>'I', 'Î'=>'I', 'Ï'=>'I', 'Ī' => 'I',
        'Ḷ' => 'L',
        'Ṃ' => 'M', 'Ṁ' => 'M',
        'Ñ'=>'N',  'Ṇ' => 'N', 'Ṅ' => 'N',
        'Ò'=>'O', 'Ó'=>'O', 'Ô'=>'O', 'Õ'=>'O', 'Ö'=>'O', 'Ø'=>'O', 'Ō' => 'O',
        'Ṛ' => 'R',
        'Ṣ' => 'S', 'Ś' => 'S',
        'Ù'=>'U', 'Ú'=>'U', 'Û'=>'U', 'Ü'=>'U', 'Ū' => 'U',
        'Ý'=>'Y', 'Þ'=>'B', 'ß'=>'Ss', 'Ź' => 'Z',
        'à'=>'a', 'á'=>'a', 'â'=>'a', 'ã'=>'a', 'ä'=>'a', 'å'=>'a', 'æ'=>'a', 'ā' => 'a',
        'ç'=>'c',
        'ḍ' => 'd',
        'è'=>'e', 'é'=>'e', 'ê'=>'e', 'ë'=>'e', 'ē' =>'e',
        'ì'=>'i', 'í'=>'i', 'î'=>'i', 'ï'=>'i', 'ī' =>'i',
        'ḷ' => 'l',
        'ṃ' => 'm', 'ṁ' => 'm',
        'ñ'=>'n', 'ṇ' =>'n', 'ṅ' => 'n',
        'ð'=>'o', 'ò'=>'o', 'ó'=>'o', 'ô'=>'o', 'õ'=>'o', 'ö'=>'o', 'ø'=>'o', 'ō' =>'o',
        'ṛ' => 'r',
        'ṣ' => 's', 'ś' => 's',
        'ù'=>'u', 'ú'=>'u', 'û'=>'u', 'ū' => 'u',
        'ý'=>'y', 'ý'=>'y', 'þ'=>'b', 'ÿ'=>'y', 'Ŕ'=>'R', 'ŕ'=>'r', 'ź' => 'z'
    );

    $alias = strtr($alias, $table);
}

function shanti_images_js_map($type) {
    global $base_url, $base_path;
    if ($type == 'openseadragon') {
        $url = "{$base_url}{$base_path}sites/all/themes/sarvaka_images/js/contrib/openseadragon.js.map";
        $content = shanti_file_get_contents($url);
        header('Content-Type: text/javascript; charset=utf-8');
        print $content;
    }
}

function shanti_images_mms_summary_page() {
    global $base_path;

    $format = arg(6);

    drupal_add_css($base_path . drupal_get_path('module', 'shanti_images') . '/css/shanti-image-mms-list.css', 'external');
    $page = array(
        '#prefix' => '<div id="mms-summary">',
        '#suffix' => '</div>',
    );
    $page['seclinks'] = array(
        '#markup' => '
            <div class="header-proper">
                <div class="tabs-secondary clearfix">
                    <h2 class="element-invisible">Secondary tabs</h2>
                    <ul class="tabs secondary">
                        <li><a href="/admin/config/media/shanti_images">IIIF</a></li>
                        <li><a href="/admin/config/media/shanti_images/settings">Other Settings</a></li>
                        <li class="active"><a href="/admin/config/media/shanti_images/list" class="active">Shanti Image List<span class="element-invisible">(active tab)</span></a></li>
                        <li><a href="/admin/config/media/shanti_images/import">Shanti Images MMS Import</a></li>
                    </ul>
                </div>
            </div>',
    );
    $page['p1'] = array(
        '#markup' => '<p>This the MMS Summary page. It lists ranges of MMS IDs that have already been imported to the ' .
            'site. <a href="/admin/config/media/shanti_images/iiif-list-view">Back to IIIF List View.</a></p>',
    );
    // Get all Shanti Images with an associated mmsid
    $q = db_query('select mmsid from {shanti_images} where mmsid > 0 order by mmsid');
    $mmsids = $q->fetchCol();
    $ignored = variable_get(MMS_DEL_VAR, array()); // Get the ones we've been told to ignore
    $mmsids = array_merge($mmsids, $ignored);  // Combine them with already imported mmsids and sort
    sort($mmsids);

    // Set vars
    $rngs = array();      //
    $missing = array();

    $lastid = array_shift($mmsids); // get the first item imported for the last id iterated
    $rst = $lastid;                        // Range start variable. First range starts with first id = last
    if ($lastid == 2) {
        $missing[] = _shanti_images_make_mms_range_out(1);
    } elseif ($lastid > 2) {
        $missing[] = _shanti_images_make_mms_range_out(1, $lastid - 1);
    }
    $is_first_range = TRUE;

    // Iterate through ID list of imported or ignored mmsids
    foreach ($mmsids as $mid) {
        // if the next mid in the list is one plus the current, make it the current
        if ($mid == ($lastid + 1)) {
            $lastid = $mid;
        } else {  // otherwise there is a gap and record it

            // If this is the first time continue because first set of ranges have already been calculated
            if ($is_first_range) {
                $is_first_range = FALSE;
                continue;
            }

            // Put the range of imported mms ids into the rngs[] array
            $rngs[] = _shanti_images_make_mms_range_out($rst, $lastid);

            // Otherwise, calculate the missing MMS IDs between the last one $lastid and the new $mid
            $mst = $lastid + 1;   // Start of missing range is the last imported one plus one
            $mend = $mid - 1;     // End of the missing range is the new mid minus one
            // If mst is less than mend it's an actual range and print out as such
            if ($mst < $mend) {
                $remlink = '<a href="#" class="shanti-image-rem-mmsid" data-mmsid="' . $mst . '-' . $mend . '">x</a>';
                $missing[] =  _shanti_images_make_mms_range_out($mst, $mend) . " $remlink";
            } else {  // Else print out a single item with the ability to remove it (in case it is a doc or video)
                $remlink = '<a href="#" class="shanti-image-rem-mmsid" data-mmsid="' . $mst . '">x</a>';
                $missing[] = _shanti_images_make_mms_range_out($mst) . " $remlink";
            }
            $rst = $mid;     // Set the new range start to this current mid
            $lastid = $mid;  // set the last Mid variable to this current mid and iterate through
        }
    }
    $rngs[] = _shanti_images_make_mms_range_out($rst, $lastid);
    if ($lastid < 69801) {
        $missing[] = _shanti_images_make_mms_range_out($lastid + 1, '69801');
    }

    // Do ignored list
    $ignorelist = array();
    $lastid = (!empty($ignored)) ? array_shift($ignored) : -1;
    $rst = $lastid;
    foreach($ignored as $mid) {
        // if the next mid in the list is one plus the last one, make it the lastone
        if ($mid == ($lastid + 1)) {
            $lastid = $mid;
        } else {  // otherwise there is a gap so record the previous range in ignore list

            if ($rst == $lastid) {
                $ignorelist[] = _shanti_images_make_mms_range_out($rst);
            } else {
                $ignorelist[] = _shanti_images_make_mms_range_out($rst, $lastid);
            }
            // restart the range counting
            $rst = $mid;
            $lastid = $mid;
        }
    }

    if ($rst == $lastid) {
        $ignorelist[] = _shanti_images_make_mms_range_out($rst);
    } else {
        $ignorelist[] = _shanti_images_make_mms_range_out($rst, $lastid);
    }

    // Output JSON Page if requested
    if ($format == 'json') {
        foreach ($rngs as &$r) {
            $r = str_replace(' - ', '-', strip_tags($r));
        }
        foreach ($missing as &$m) {
            $m = str_replace(' - ', '-', str_replace(" x", "", strip_tags($m)));
        }
        foreach ($ignorelist as &$ign) {
            $ign = strip_tags($ign);
        }
        $outdata = array(
            'imported' => $rngs,
            'missing' => $missing,
            'ignored' => $ignorelist,
        );
        drupal_json_output($outdata);
        return;
    }

    // Create the page with the lists of mms ranges and missing mms ranges
    $headers = array('List of MMS Ranges', 'Missing MMS Ranges', 'Ignored MMS');
    if (empty($rngs)) {
        $rngs[] = "No MMS images have been imported";
        $missing[] = "All MMS images have yet to be imported";
    }
    $list1 = array(
        '#theme' => 'item_list',
        '#list_type' => 'ul',
        '#title' => '',
        '#items' => $rngs,
        '#attributes' => array('class' => 'mms-range-list'),
        '#wrapper_attributes' => array('class' => 'container'),
        '#children' => array(),
        '#printed' => FALSE,
    );

    $list2 = array(
        '#theme' => 'item_list',
        '#list_type' => 'ul',
        '#title' => '',
        '#items' => $missing,
        '#attributes' => array('class' => 'mms-range-list missing'),
        '#wrapper_attributes' => array('class' => 'container'),
        '#children' => array(),
        '#printed' => FALSE,
    );
    $list3 = array(
        '#theme' => 'item_list',
        '#list_type' => 'ul',
        '#title' => '',
        '#items' => $ignorelist,
        '#attributes' => array('class' => 'mms-range-list ignored'),
        '#wrapper_attributes' => array('class' => 'container'),
        '#children' => array(),
        '#printed' => FALSE,
    );

    $rows = array(array(drupal_render($list1), drupal_render($list2), drupal_render($list3)));
    $page['table'] = array(
        '#markup' => theme('table', array('header' => $headers, 'rows' => $rows)),
    );
    drupal_add_css("#mms-summary table td {vertical-align: top;}", "inline");
    return $page;

}

function _shanti_images_make_mms_range_out($mst, $msend=FALSE) {
    if ($mst == $msend) { $msend = FALSE; }
    $mst = l($mst, 'http://mms.thlib.org/media_objects/' . $mst, array( 'attributes' => array('target' => '_blank')));
    if ($msend) {
        $msend = l($msend, 'http://mms.thlib.org/media_objects/' . $msend, array( 'attributes' => array('target' => '_blank')));
    }
    $out = $mst;
    if ($msend) {
        $out .= " - $msend";
    }
    return $out;
}


function shanti_images_remove_mmsid_from_list($mmsrng = "") {
    if (empty($mmsrng)) { $mmsrng = arg(4); }
    if (strstr($mmsrng, '-')) {
        list($st, $en) = explode('-', $mmsrng);
        foreach(range($st, $en) as $mmsid) {
            _shanti_images_remove_one_mmsid_from_list($mmsid);
        }
        $jout = array(
            'success' => TRUE,
            'msg' => "This range has been ignored",
        );
        drupal_json_output($jout);
    } else {
        $msg = _shanti_images_remove_one_mmsid_from_list($mmsrng);
        drupal_json_output($msg);
    }
}

function _shanti_images_remove_one_mmsid_from_list($mmsid, $rettype = 'json') {
    $mmslist = variable_get(MMS_DEL_VAR, array());
    if (is_numeric($mmsid)) {
        if (!in_array($mmsid, $mmslist)) {
            $mmslist[] = $mmsid;
            sort($mmslist);
            variable_set(MMS_DEL_VAR, $mmslist);
            $addstatus = TRUE;
            $msg = "This ID has been ignored";
        } else {
            $addstatus = FALSE;
            $msg = "MMS ID $mmsid is already in ignore list";
        }
    } else {
        $addstatus = FALSE;
        $msg = "MMS ID was not a number: $mmsid";
    }
    if (is_string($rettype) && $rettype == 'json') {
        $jout = array(
            'success' => $addstatus,
            'msg' => $msg,
        );
        return $jout;
    }
}

function shanti_images_get_valid_extensions($as_array=TRUE) {
  $ext = variable_get('shanti_images_extensions', 'jpg jpeg jp2 png tif tiff');
  if ($as_array) {
    $ext = explode(' ', $ext);
  }
  return $ext;
}

function shanti_images_get_image_object($nid, $type='node') {
  $si = new ShantiImage('', $nid); // Load existing record from node ID, siid is '' because filled in by table
  return $si;
}


function shanti_images_fix_prod_urls($url, $filenm) {
    global $base_url;
    $is_dev = (strstr($base_url, '.dd') || strstr($base_url, '-dev')) ? TRUE : FALSE;
    if ($is_dev && preg_match('/shanti-image(-stage)?-\d+/', $filenm)) {
        $url = str_replace('-test', '', $url);
    }
    return $url;
}
