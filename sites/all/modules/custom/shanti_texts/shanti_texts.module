<?php

define('SHANTI_TEXTS_PATH', drupal_get_path('module','shanti_texts'));

function shanti_texts_help($path, $arg)
{
    if ($path == "admin/help#shanti_texts") {
        return '<p>'.t('SHANTI Texts help is not currently available.').'</p>';
    }
}

function shanti_texts_enable()
{
    drupal_set_message($message = t('SHANTI Texts activated.'), $type = 'status');
    drupal_theme_rebuild();
}

/**
 * Implementing hook_ckeditor_settings_alter to point to Shanti Texts custom settings
 * Used to update Word cleanup JS with additional functionality
 *
 * @param $settings
 * @param $conf
 */
function shanti_texts_ckeditor_settings_alter(&$settings, $conf) {
  // Change the ckeditor custom config path
  $settings['customConfig'] = '/' . drupal_get_path('module', 'shanti_texts') . '/js/shanti_texts_ckeditor.config.js';
  //watchdog('shanti texts ckeditor settings', json_encode($settings));
}

function shanti_texts_menu()
{
    return array(
        'shanti_texts' => array(
            'page callback' => 'shanti_texts_default',
            'type' => MENU_CALLBACK,
            'access arguments' => array('access content'),
        ),
        'shanti_texts/voyant/%' => array(
            'page callback' => 'shanti_texts_voyant',
            'page arguments' => array(2),
            'type' => MENU_CALLBACK,
            'access arguments' => array('access content'),
        ),
        'shanti_texts/node_ajax/%' => array(
            'page callback' => 'shanti_texts_node_ajax',
            'page arguments' => array(2),
            'type' => MENU_CALLBACK,
            'access callback' => 'user_access',
            'access arguments' => array('access content'),
        ),
        'shanti_texts/node_ajax_text/%' => array(
            'page callback' => 'shanti_texts_node_ajax_text',
            'page arguments' => array(2),
            'type' => MENU_CALLBACK,
            'access callback' => 'user_access',
            'access arguments' => array('access content'),
        ),

        'shanti_texts/node_embed/%' => array(
            'page callback' => 'shanti_texts_node_embed',
            'page arguments' => array(2),
            'type' => MENU_CALLBACK,
            'access callback' => 'user_access',
            'access arguments' => array('access content'),
        ),

        'shanti_texts/node_json/%' => array(
            'page callback' => 'shanti_texts_node_json',
            'page arguments' => array(2),
            'type' => MENU_CALLBACK,
            'access arguments' => array('access content'),
        ),
        'admin/content/book/shanti_texts' => array(
            'title' => 'SHANTI Texts',
            'page callback' => 'shanti_texts_admin_page',
            'type' => MENU_LOCAL_TASK,
            'weight' => 10,
            'access arguments' => array('administer shanti texts'),
        ),
    );
}

function shanti_texts_permission()
{
    return array(
        'administer shanti texts' => array(
            'title' => t('Administer SHANTI Texts'),
            'description' => t('Perform administration tasks for SHANTI Texts.'),
        ),
    );
}

/**
* Menu Callbacks
*/

function shanti_texts_default()
{
    drupal_goto("<front>"); // Redirect to front page
}

function shanti_texts_voyant($nid)
{
    global $base_url;
    $url = "https://voyant-tools.org";
    $q = array(
        'input'  => "$base_url/shanti_texts/node_ajax_text/$nid",
    );
    $url = url($url, array('external' => TRUE,  'query' => $q));
    drupal_goto($url);
}

function shanti_texts_node_ajax($nid)
{
    drupal_goto("shanti_texts/node_embed/$nid");
}

function shanti_texts_node_ajax_text($nid)
{
    $node = node_load($nid);
    $html = views_embed_view('single_text_body','panel_pane_default',$node->book['bid']);
    // Strip tags for plain text as this is used by Voyant (MANU-4152)
    $html = preg_replace('/\s{2,}/', ' ', trim($html));
    $html = preg_replace("/\n{2,}/", "\n", $html);
    header('Content-Type:text/html; charset=utf-8');
    print strip_tags($html);
}

function shanti_texts_node_embed($nid)
{
    $node = node_load($nid);
    $build = array(
        '#type' => 'markup',
        '#markup' => '<div class="content">There is no text with the id ' . $nid . '.</div>',
    );
    if ($node) {
        $build = node_view($node, 'embed'); // This view mode is declared in Display Suite -- should it just be declared here?
        $url = parse_url(variable_get('shanti_kmaps_admin_server_subjects_explorer'));
    }
    drupal_add_http_header('X-Frame-Options', 'ALWAYS-ALLOW ' . $url['host']);
    return $build;
}

function shanti_texts_node_json($nid)
{
    $node = node_load($nid);
    print ajax_render($node);
}

function shanti_texts_admin_page()
{
    $build = array(
	    '#type' => 'container',
	    '#prefix' => ('<h2>SHANTI Texts Admin Page</h2>'),
    );
    return $build;
}

/**
 * Blocks
 */

function shanti_texts_block_info()
{
	$blocks['flyout_search'] = array(
		'info' => t('Flyout Search Tabs'),
		'cache' => DRUPAL_CACHE_PER_ROLE,
	);
	return $blocks;
}

function shanti_texts_block_view($block_key)
{
    $block = array();
    if ($block_key == 'flyout_search')
	{
        $block['subject'] = t('Flyout Search Tabs');
        $block['content'] = t('Replace this content with a template.');
    }
    return $block;
}

/**
 * Alterations
 */

function shanti_texts_menu_alter(&$items)
{
    $items['node/%node/reorder']['title'] = 'Sort Text Sections';
    unset($items['node/%node/edit']['title']);
    $items['node/%node/edit']['title callback'] = 'shanti_texts_edit_tab_title';
    $items['node/%node/edit']['title arguments'] = array(1);
}

function shanti_texts_edit_tab_title($node)
{
    if ($node->type == 'book')
    {
        if ($node->book['nid'] == $node->book['bid'])
        {
            return t('Edit Top Section');
        }
        else
        {
            return t('Edit Child Section');
        }
    }
    return t('Edit');
}

function shanti_texts_form_alter(&$form, &$form_state, $form_id) {
  $search_flyout_forms = array(
    'views-exposed-form-text-search-block-3',
    'views-exposed-form-full-text-local-2-block',
  );

  if ($form_id == 'book_admin_edit')
  {
      $form['save']['#value'] = 'Save text sections';
  }
  elseif ($form_id == 'book_node_form')
  {
      $form['actions']['submit']['#value']  = 'Save text section';
      // Hide things if this is the form for a book child page
      $nid = $form['nid']['#value'];
      $bid = $form['#node']->book['bid'];
      if ($nid != $bid) {
          hide($form['field_og_collection_ref']);
          hide($form['field_general_featured_image']);
          field_group_hide_field_groups($form, array('group_collection','group_book_metadata','group_book_admin'));
      }
      // Check if it's an additional page inside existing book and add class to form
      if (!empty($form['book']['bid']['#default_value']) && $form['book']['bid']['#default_value'] > 0) {
        $form['#attributes']['class'][] = 'node-add-page-form';
        $form['node_url'] = array(
          '#type' => 'hidden',
          '#attributes' => array('id' => 'parent-page-alias'),
          '#value' => drupal_get_path_alias('node/' . $form['book']['bid']['#default_value']),
        );
        // Adjust for page title if its adding a page to a book
        $title = drupal_get_title();
        if (!strstr($title, $form['#node']->title)) {
          $book_node = node_load($form['book']['bid']['#default_value']);
          if ($book_node && !empty($book_node->title)) {
            $title = str_replace(t('Create Book page'), t('Add Page to '), $title);
            drupal_set_title($title . ' <em>' . $book_node->title . ' </em>', PASS_THROUGH);
          }
        }
      }
  }
  elseif($form_id == 'node_delete_confirm')
  {
    $node = $form['#node'];
    if ($node->book['bid'] == $node->nid) {
      $toc = book_toc($node->nid, 20);
      if (count($toc) > 1) {
        $delchld = array(
          'delchild' => array(
            '#type' => 'checkbox',
            '#prefix' => '<p>Or you can delete all children pages in this book by checking the box below.</p>',
            '#title' => 'Delete Children',
            '#description' => 'If this is not checked children will become their own books',
          )
        );
        // Put delete children check box before description
        $form = array_slice($form, 0, 3, TRUE) + $delchld
          + array_slice($form, 3, NULL, TRUE);
        // Add custom function to delete children
        array_unshift($form['#submit'], 'shanti_texts_delete_children_submit');
      }
    }
    // Add custom function to redirect to collection after delete
    array_push($form['#submit'], 'shanti_texts_delete_path_submit');
  }
  elseif($form_id == 'views_exposed_form' && in_array($form['#id'], $search_flyout_forms))
  {
    $form_state['view']->display_handler->handlers['empty']['area']->options['format'] = 'full_html';

    $input = $form_state['input'];
    $term = NULL;
    $no_results_message = "<p>" . t("There are no results for '%s'. Check your spelling or try a different term.") . "</p>";
    if (array_key_exists('title', $input)) {
      $term = $input['title'];
    } else if (array_key_exists('search_api_views_fulltext', $input)) {
      $term = $input['search_api_views_fulltext'];
    }
    if($term && count($form_state->view->result) == 0) {
      $form_state['view']->display_handler->handlers['empty']['area']->options['content'] = sprintf(
        $no_results_message,
        check_plain($term)
      );
    }
  }
}

/**
 * Implements hook_kmaps_fields_solr_doc_alter to change the doc sent to the solr KM asset index.
 *   Called from _shanti_kmaps_fields_get_solr_doc in shanti_kmaps_fields.module line 483
 *   Goes through entity references assigned in the Solr index field mapping on the Shanti Image content type page
 *   Turns NIDs into text strings for agents and descriptions
 **/
function shanti_texts_kmaps_fields_solr_doc_alter(&$solrdoc)
{
    foreach ($solrdoc as $m => &$sdoc) {
        $node = node_load($sdoc['id']);
        // Get Language from Kmap field
        if (!empty($node->field_language_kmap[LANGUAGE_NONE][0])) {
            $sdoc['node_lang'] = $node->field_language_kmap[LANGUAGE_NONE][0]['header'];
        }
    }
}

/**
 * Hook presaves in texts checks to see if the access to the book has changed
 * And if it has then it batch updates all the book pages to match the access
 * This is so that for a book created as private (with all children nodes as private)
 * One can see the pages if it is made public. Otherwise only the book page is public
 * and the children remain private
 *
 * @param $node
 */
function shanti_texts_node_presave($node) {
  /*
  //dpm($node, 'node in presave');
  if ($node->type == 'book') {
    $node->access_change = FALSE;
    if ($node->book['bid'] == $node->book['nid']) {
      $node->access_change= TRUE;
      $prevaccess = $node->original->group_content_access['und'][0]['value'];
      $newaccess = $node->group_content_access['und'][0]['value'];
      if ($prevaccess != $newaccess) {
        $batch = array(
          'operations' => array(
            array(
              'shanti_texts_update_child_access',
              array($node->book['bid'], $newaccess)
            ),
          ),
          'finished' => 'shanti_texts_update_child_access_finished',
          'title' => t('Updating Permissions on the Book’s Pages'),
          'init_message' => t('Updating all book pages'),
          'progress_message' => t('Updated @current out of @total pages.'),
          'error_message' => t('Updating book page permissions has encountered an error.'),
        );
        batch_set($batch);
        $alias = drupal_get_path_alias("node/{$node->nid}");
        batch_process($alias);
      }
    }
  }
  */
}

/**
 *  The operation function called from shanti_texts_node_presave if book access has changed
 *  Updates visibility (access) for all child nodes to match the book
 *  Function copied directly from https://cgit.drupalcode.org/book_delete/tree/book_delete.module line 127
 *
 * @param $bid
 * @param $acces_val
 * @param $context
 *
 * @throws \Exception
 */
function shanti_texts_update_child_access($bid, $acces_val, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['max'] = db_query("SELECT COUNT(nid) FROM {book} WHERE bid = :bid", array(':bid' => $bid))->fetchField();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['highest_nid'] = 0;
    $context['sandbox']['bid'] = $bid;
  }

  // Update 5 nodes at a time.
  $limit = 5;
  $nids = db_query_range("SELECT nid FROM {book} WHERE bid = :bid AND nid > :nid AND nid <> bid ORDER BY nid ASC", 0, $limit, array(
    ':bid' => $context['sandbox']['bid'],
    ':nid' => $context['sandbox']['highest_nid'],
  ))->fetchCol();

  if (!empty($nids)) {
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $nd) {
      $nd->group_content_access['und'][0]['value'] = $acces_val;
      node_save($nd);
    }
  }

  // Update our progress information.
  $context['sandbox']['progress'] += count($nids);
  $context['sandbox']['highest_nid'] = array_pop($nids);

  // Multistep processing : report progress.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    $context['message'] = t("@num out of @total children updates (@perc %)!",
      array(
        '@num' => $context['sandbox']['progress'],
        '@total' => $context['sandbox']['max'],
        '@perc' => $context['finished'],
      )
    );
  }
}

/**
 * The finish function for batch updating child access after book access changed.
 * Code from https://cgit.drupalcode.org/book_delete/tree/book_delete.module
 *
 * @param $success
 * @param $results
 * @param $operations
 *
 * @throws \Exception
 */
function shanti_texts_update_child_access_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The visibility for each of the book’s pages has been updated.'));
  }
  else {
    drupal_set_message(t('An error occurred, when trying to update visibility for the book pages, processing did not complete.'), 'error');
    $message = format_plural(count($results), '1 item successfully updated:', '@count items successfully updated:');
    $message .= theme('item_list', $results);
    drupal_set_message($message);
  };
}

function shanti_texts_node_insert($node)
{
    if ($node->type == 'book')
    {
        _shanti_texts_book_update_or_insert($node,'insert');
    }
}

function shanti_texts_node_update($node)
{
    if ($node->type == 'book')
    {
        _shanti_texts_book_update_or_insert($node,'update');
    }
}

function _shanti_texts_book_update_or_insert($node,$op)
{
    if (empty($node->nid))
    {
        // Should not happen at this point (apparently)
    }

    // Case: Child; set collection to parent's
    elseif ($node->nid != $node->book['bid'])
    {
        $book = node_load($node->book['bid']);
        $lang = $node->language;
        if (isset($book->field_og_collection_ref))
        {
            if (!isset($node->field_og_collection_ref[$lang]) && isset($node->field_og_collection_ref[LANGUAGE_NONE])) {
                $lang = LANGUAGE_NONE;  // To prevent the notices
            }
            // Depends on collection field and visibility
            $node->field_og_collection_ref[$lang][0]['target_id'] = $book->field_og_collection_ref[$lang][0]['target_id'];
            $node->group_content_access[LANGUAGE_NONE][0]['value'] = $book->group_content_access[LANGUAGE_NONE][0]['value'];
            field_attach_presave('node', $node);
            field_attach_update('node', $node);
            entity_get_controller('node')->resetCache(array($node->nid));
            node_access_acquire_grants($node);
        }
    }
    // Case: Parent; set childrens' collections to parent's and visibility to parent's
    elseif ($node->nid == $node->book['bid'])
    {
        if ($op == 'update')
        {
            $sql = "SELECT nid FROM {book} WHERE bid = :bid AND nid != bid";
            $rs = db_query($sql,array(':bid' => $node->nid));

            while ($r = $rs->fetchObject())
            {
                $this_node = node_load($r->nid);
                $lang = $this_node->language;
                if (isset($node->field_og_collection_ref))
                {
                    // Depends on collection field and collection visibility field
                    $this_node->field_og_collection_ref[$lang][0]['target_id'] = $node->field_og_collection_ref[$lang][0]['target_id'];
                    $this_node->group_content_access[LANGUAGE_NONE][0]['value'] = $node->group_content_access[LANGUAGE_NONE][0]['value'];
                    field_attach_presave('node', $this_node);
                    field_attach_update('node', $this_node);
                    entity_get_controller('node')->resetCache(array($this_node->nid));
                    node_access_acquire_grants($this_node);
                }
            }
        }
    }
    else
    {
        // Do nothing
    }
}

/**
 * Custom function for node delete, return to collection page if node has a collection
 * @param $form
 * @param $form_state
 */
function shanti_texts_delete_path_submit(&$form, &$form_state) {
  $node = $form['#node'];
  $retpath = 'home';
  if (!empty($node->book) && $node->book['bid'] != $node->nid) {
    $retpath = drupal_get_path_alias("node/{$node->book['bid']}");
  } else if (!empty($node->field_og_collection_ref)) {
    $collid = $node->field_og_collection_ref['und'][0]['target_id'];
    $retpath = drupal_get_path_alias("node/{$collid}");
  }
  drupal_goto($retpath);
}

/**
 * Extra submit node for node_delete form. If book and delete children checkbox is checked
 * See shanti_texts_form_alter() for checkbox definition. If checked,
 * This starts a batch process to delete all child nodes of the book
 *
 * @param $form
 * @param $form_state
 */
function shanti_texts_delete_children_submit(&$form, $form_state)
{
  $node = $form['#node'];
  $retpath = 'home';
  if (!empty($node->field_og_collection_ref)) {
    $collid = $node->field_og_collection_ref['und'][0]['target_id'];
    $retpath = drupal_get_path_alias("node/{$collid}");
  }
  $delchild = $form_state['values']['delchild'];
	if ($node->type == 'book' && $node->book['bid'] == $node->nid && $delchild == 1)
	{

    $batch = array(
      'operations' => array(
        array('shanti_texts_delete_node_children', array($node->book['bid'])),
      ),
      'finished' => 'shanti_texts_delete_node_children_finished',
      'title' => t('Deleting Book Pages'),
      'init_message' => t('Starting to delete all book pages'),
      'progress_message' => t('Deleted @current out of @total pages.'),
      'error_message' => t('Deleting text pages has encountered an error.'),
    );
    batch_set($batch);
    batch_process($retpath);
	}
}

/**
 *  The operation function called in the batch to delete a books children
 *  Function copied directly from https://cgit.drupalcode.org/book_delete/tree/book_delete.module line 127
 *
 * @param $bid
 * @param $context
 *
 * @throws \Exception
 */
function shanti_texts_delete_node_children($bid, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['max'] = db_query("SELECT COUNT(nid) FROM {book} WHERE bid = :bid", array(':bid' => $bid))->fetchField();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['highest_nid'] = 0;
    $context['sandbox']['bid'] = $bid;
  }

  // Delete 5 nodes at a time.  This needs to be set fairly low as there may be
  // many search index deletions for each node.
  $limit = 3;
  $nids = db_query_range("SELECT nid FROM {book} WHERE bid = :bid AND nid > :nid AND nid <> bid ORDER BY nid ASC", 0, $limit, array(
    ':bid' => $context['sandbox']['bid'],
    ':nid' => $context['sandbox']['highest_nid'],
  ))->fetchCol();
  if (!empty($nids)) {
    node_delete_multiple($nids);
  }

  // Update our progress information.
  $context['sandbox']['progress'] += count($nids);
  $context['sandbox']['highest_nid'] = array_pop($nids);
  // Delete the top book node last.
  if ($context['sandbox']['progress'] == $context['sandbox']['max'] - 1) {
    node_delete($context['sandbox']['bid']);
    $context['sandbox']['progress']++;
  }

  // Multistep processing : report progress.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    $context['message'] = t("@num out of @total children deleted (@perc %)!",
      array(
        '@num' => $context['sandbox']['progress'],
        '@total' => $context['sandbox']['max'],
        '@perc' => $context['finished'],
      )
    );
  }
}

/**
 * The finish function for batch deleting children of a book node.
 * Code from https://cgit.drupalcode.org/book_delete/tree/book_delete.module
 *
 * @param $success
 * @param $results
 * @param $operations
 *
 * @throws \Exception
 */
function shanti_texts_delete_node_children_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The book and all its children have been deleted.'));
  }
  else {
    drupal_set_message(t('An error occurred, when trying to delete book children, processing did not complete.'), 'error');
    $message = format_plural(count($results), '1 item successfully deleted:', '@count items successfully deleted:');
    $message .= theme('item_list', $results);
    drupal_set_message($message);
  };
}

/**
 * Helper function to determine if a book node is a book
 *
 * @return boolean
 *      - TRUE if the node is a top-level book
 *      - FALSE if the node is a page within a book or any other type of node
 */
function shanti_texts_is_book($node) {
    if (is_numeric($node)) { $node = node_load($node); }
    $is_book = FALSE;
    if (!empty($node->book)) {
        if ($node->book['nid'] == $node->book['bid']) {
            $is_book = TRUE;
        }
    }
    return $is_book;
}

/**
 * Helper function to determine if a book node is a page
 *
 * @return boolean
 *      - TRUE if the node is a top-level book
 *      - FALSE if the node is a page within a book or any other type of node
 */
function shanti_texts_is_page($node) {
    if (is_numeric($node)) { $node = node_load($node); }
    $is_page = FALSE;
    if (!empty($node->book)) {
        if ($node->book['nid'] != $node->book['bid']) {
            $is_page = TRUE;
        }
    }
    return $is_page;
}

/**
 * Special function to count number of BOOK items in a collection in texts.
 * The Book modules saves both nooks and pages as nodes, determine which are books
 * by querying the book table and finding which nids equal the bid.
 *
 * Used in All Collection and My Collection views PHP field
 *
 * @param $coll
 * @param string $retval
 * @return array|int
 */
function shanti_texts_get_collection_items($coll, $retval='count') {
    $books = array();
    try {
        $pgids = shanti_collections_get_items_in_collection($coll, 'nids');
        $q = db_select('book', 'bk')->fields('bk', array('nid'))
            ->where('nid=bid')->condition('bk.nid', $pgids, 'IN')->execute();
        $results = $q->fetchAll();
        foreach ($results as $res) {
            $books[] = $res->nid;
        }
    } catch (Exception $e) { }

    if ($retval == 'count') {
        return count($books);
    } else {
        return $books;
    }
}

function shanti_texts_user_view($account, $view_mode, $langcode) {
    if (module_exists('realname') && !empty($account->content['realname']['#title'])) {
        $account->content['realname']['#title'] = t("Full Name");
        if (!empty($account->content['realname'][0]['#markup'])) {
            $mu = $account->content['realname'][0]['#markup'];
            if (strstr($mu, 'class="active"></a>')) {
                $mu = str_replace('active"></a>', 'active">' . $account->name . '</a> <small>(Edit profile to add first and last name.)</small>', $mu);
                $account->content['realname'][0]['#markup'] = $mu;
            }
        }
    }
}

function shanti_texts_get_lang_code($nid)
{
    $textlang = '';
    $node = node_load($nid);
    $lang = 'und';
    if (isset($node->language)) $lang = $node->language;
    if (isset($node->book)) $bid = $node->book['bid'];
    if (isset($node->field_dc_lang_code[$lang][0]['value'])) {
        $textlang = $node->field_dc_lang_code[$lang][0]['value'];
    }
    elseif (!$textlang && $bid && $nid != $bid) {
        $book = node_load($node->book['bid']);
        $blang = $book->language;
        if (isset($book->field_dc_lang_code[$blang][0]['value'])) {
            $textlang = $book->field_dc_lang_code[$blang][0]['value'];
        }
        else {
            $textlang = 'en';
        }
    }
    else {
        $textlang = 'en';
    }
    return $textlang;
}