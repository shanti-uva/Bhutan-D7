<?php

/**
 * @file
 * Custom views functionalities for Shanti Sources site.
 */

require_once 'facets.inc';
// Make a CURRYEAR constant.
define('CURRYEAR', intval(date("Y")));

/**
 *
 */
function sources_views_init() {
  global $theme_key;
  if ($theme_key == 'sources_theme') {
    module_load_include('inc', 'sources_views', 'sources_views_taxonomy_hierarchy');
    module_load_include('inc', 'sources_views', 'breadcrumbs');
    module_load_include('inc', 'sources_views', 'biblio');
    module_load_include('inc', 'sources_views', 'sources_views_fancytree_taxonomy');
    libraries_load('fancytree');
    drupal_add_js(drupal_get_path('module', 'fancytree') . '/fancytree.js');
    drupal_add_js(drupal_get_path('module', 'sources_views') . '/js/sourcesViewsFancyTreeTaxonomy.js');
  }
}

/**
 * Implements hook_menu().
 */
function sources_views_menu() {
  $items['biblio/titles/list_callback'] = array(
    'page callback' => 'biblio_title_list_callback',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['biblio/plain_titles/list_callback'] = array(
    'page callback' => 'biblio_plain_title_list_callback',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['biblio/authors/list_callback'] = array(
    'page callback' => 'biblio_author_list_callback',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['biblio/publishers/list_callback'] = array(
    'page callback' => 'biblio_publisher_list_callback',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['biblio/place_published/list_callback'] = array(
    'page callback' => 'biblio_place_published_list_callback',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['biblio/tags/list_callback'] = array(
    'page callback' => 'biblio_tags_list_callback',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['json/collection-list'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page callback' => 'sources_views_build_json_taxonomy_list',
  );
  $items['json/collection-list/%'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page arguments' => array(2),
    'page callback' => 'sources_views_build_json_taxonomy_filtered_list',
  );
  return $items;
}

/**
 * Helper to get the publicaiton years from the biblio_year facet. Automatically removes '0'
 * and non-numeric values.
 *
 * @return array[integer]
 *   List of publication years
 **/
function _sources_views_get_publication_years() {
  $facets = _sources_views_get_current_search_facets();

  $publication_years = array_filter(
    array_map(
      '_sources_views_get_clean_facet_filter',
      $facets['biblio_year']
    ),
    function ($year) {
      return is_numeric($year) && $year > 0;
    }
  );
  return $publication_years;
}

/**
 * Pre-render function for publication type <select> in advanced search form. We have to wait
 * for the pre_render hook for the Search API search to be executed.
 **/
function sources_views_advanced_search_advanced_biblio_publication_type_pre_render($element) {
  $facets = _sources_views_get_current_search_facets();
  $publication_type_ids = array_map(
    '_sources_views_get_clean_facet_filter',
    $facets['biblio_publication_type']
  );
  $query = db_query('SELECT tid, name FROM {biblio_types} WHERE tid IN (:pub_ids)', array(
    ':pub_ids' => $publication_type_ids,
  ));
  $result = $query->fetchAllKeyed();
  $pub_types = array('0' => 'Select Source Type') + $result;
  $element['#options'] = $pub_types;
  // Cache publication types for later use in this request.
  drupal_static('sources_views_biblio_publication_types', $pub_types);
  return $element;
}

/**
 * Implements hook_form_alter().
 */
// Function sources_views_form_alter(&$form, &$form_state, $form_id) {}
// Commit 48d156abedca63194dd25f824df433d07248fcac is solely the deletion of this function.
/**
 * Implements custom validation for exposed form.
 */
function sources_views_exposed_filter_validation($form, &$form_state) {
  if ($form_state['values']['biblio_year'] > $form_state['values']['biblio_year_1']) {
    form_set_error('biblio_year', '"From" year value should be lower than "To" year value');
  }
  if ($form_state['values']['biblio_year_1'] < $form_state['values']['biblio_year']) {
    form_set_error('biblio_year_1', '"To" year value should be higher than "From" year value');
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function sources_views_entity_property_info_alter(&$info) {
  $info['node']['properties']['sort_biblio_author'] = array(
    'type' => 'text',
    'label' => t('Sorting Biblio Author'),
    'getter callback' => 'sources_views_search_api_property_sort_biblio_author_getter_callback',
  );
  $info['node']['properties']['sort_stripped_node_title'] = array(
    'type' => 'text',
    'label' => t('Sorting Stripped Node Title'),
    'getter callback' => 'sources_views_search_api_property_sort_stripped_node_title_getter_callback',
  );
  $info['node']['properties']['sort_custom_publication_year'] = array(
    'type' => 'text',
    'label' => t('Sorting Custom Publication Year'),
    'getter callback' => 'sources_views_search_api_property_sort_custom_publication_year_getter_callback',
  );
  $info['node']['properties']['biblio_publication_type'] = array(
    'type' => 'text',
    'label' => t('Publication Type'),
    'getter callback' => 'sources_views_search_api_property_biblio_publication_type_getter_callback',
  );
  $info['node']['properties']['search_text_biblio_author'] = array(
    'type' => 'text',
    'label' => t('Search text biblio authors'),
    'getter callback' => 'sources_views_search_api_property_search_text_biblio_author_getter_callback',
  );
  $info['node']['properties']['search_text_biblio_publisher'] = array(
    'type' => 'text',
    'label' => t('Search text publisher'),
    'getter callback' => 'sources_views_search_api_property_search_text_biblio_publisher_getter_callback',
  );
  $info['node']['properties']['search_text_biblio_publish_place'] = array(
    'type' => 'text',
    'label' => t('Search text publish place'),
    'getter callback' => 'sources_views_search_api_property_search_text_biblio_publish_place_getter_callback',
  );
  $info['node']['properties']['search_text_biblio_abstract'] = array(
    'type' => 'text',
    'label' => t('Search text abstract'),
    'getter callback' => 'sources_views_search_api_property_search_text_biblio_abstract_getter_callback',
  );
  $info['node']['properties']['search_text_zotero_tags'] = array(
    'type' => 'text',
    'label' => t('Search text zotero tags'),
    'getter callback' => 'sources_views_search_api_property_search_text_zotero_tags_getter_callback',
  );
  $info['node']['properties']['title_orig'] = array(
    'type' => 'string',
    'label' => t('Original node title for searching'),
    'getter callback' => 'sources_views_search_api_property_title_orig_getter_callback',
  );
}

/**
 * Returns node biblio author value.
 */
function sources_views_search_api_property_sort_biblio_author_getter_callback($item) {
  $node = node_load($item->nid);
  $author_names = array();
  foreach ($node->biblio_contributors as $author) {
    if (!empty($author['lastname'])) {
      $author_names[] = $author['lastname'];
    }
  }
  return (isset($author_names[0])) ? $author_names[0] : '';
}

/**
 * Return only alphanumeric characters and remove specific words from sorting.
 */
function sources_views_search_api_property_sort_stripped_node_title_getter_callback($item) {
  // Strip words with less than 3 letters.
  $stripped_title = preg_replace('/(\b.{1,2}\s)/', ' ', $item->title);
  // Strip specific words with 3 letters.
  $wordlist = array('the', 'The');
  foreach ($wordlist as &$word) {
    $word = '/\b' . preg_quote($word, '/') . '\b/';
  }
  $word_replaced_stripped_title = preg_replace($wordlist, '', $stripped_title);
  // Strip spaces.
  $no_space_title = preg_replace('/[^A-Za-z0-9]/', '', $word_replaced_stripped_title);

  return $no_space_title;
}

/**
 * Return empty publication years with the current year + 1 year for it to be placed on the last row of views result.
 */
function sources_views_search_api_property_sort_custom_publication_year_getter_callback($item) {
  // We assign numeric equivalent for specific values, so we could use them for sorting.
  switch ($item->biblio_year) {
    case '0':
      $year = date('Y', strtotime('+1 year'));
      break;

    case 'Submitted':
      $year = '1';
      break;

    case 'In Press':
      $year = '2';
      break;

    default:
      $year = $item->biblio_year;
  }
  return $year;
}

/**
 * Returns publication type value.
 */
function sources_views_search_api_property_biblio_publication_type_getter_callback($item) {
  $node = node_load($item->nid);
  return $node->biblio_type;
}

/**
 * Returns biblio author value.
 */
function sources_views_search_api_property_search_text_biblio_author_getter_callback($item) {
  $node = node_load($item->nid);
  $author_names = '';
  foreach ($node->biblio_contributors as $author) {
    if (!empty($author['name'])) {
      $author_names .= $author['name'] . ' ';
    }
  }
  return $author_names;
}

/**
 * Returns biblio publisher value.
 */
function sources_views_search_api_property_search_text_biblio_publisher_getter_callback($item) {
  return $item->biblio_publisher;
}

/**
 * Returns biblio publish place value.
 */
function sources_views_search_api_property_search_text_biblio_publish_place_getter_callback($item) {
  return $item->biblio_place_published;
}

/**
 * Returns biblio abstract value.
 */
function sources_views_search_api_property_search_text_biblio_abstract_getter_callback($item) {
  return $item->biblio_abst_e;
}

/**
 * Returns zotero tags value.
 */
function sources_views_search_api_property_search_text_zotero_tags_getter_callback($item) {
  $node = node_load($item->nid);
  $tags = '';
  if (!empty($node->field_zotero_tags['und'])) {
    foreach ($node->field_zotero_tags['und'] as $tag) {
      if (!empty($tag['tid'])) {
        $term = taxonomy_term_load($tag['tid']);
        $tags .= $term->name . ' ';
      }
    }
  }
  return $tags;
}

/**
 * Returns original title value.
 */
function sources_views_search_api_property_title_orig_getter_callback($item) {
  return $item->title;
}

/**
 * Implements hook_block_info().
 */
function sources_views_block_info() {
  $blocks['custom_sort_filter'] = array(
    'info' => t('Custom views filter'),
  );
  $blocks['fancytree_taxonomy_block'] = array(
    'info' => t('FancyTree Taxonomy Block'),
  );
  $blocks['fancytree_taxonomy_flyout_block'] = array(
    'info' => t('FancyTree Taxonomy Search Flyout Block'),
  );
  $blocks['custom_taxonomy_breadcrumb'] = array(
    'info' => t('Custom taxonomy breadcrumb'),
    'region' => 'content',
  );
  $blocks['advanced_search_filter'] = array(
    'info' => t('Advanced search block'),
    'region' => 'content',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sources_views_block_view($delta = '') {
  $block = array();
  $vocabulary = taxonomy_vocabulary_machine_name_load('collections');
  $vid = $vocabulary->vid;
  switch ($delta) {
    case 'custom_sort_filter':
      $block['subject'] = '';
      $block['content'] = (!search_landing_page() || drupal_is_front_page()) ? theme('sources_views_custom_sort_field', array('value' => sources_views_custom_sort_block_content())) : '';
      break;

    case 'fancytree_taxonomy_block':
      $block['subject'] = '';
      $block['content'] = sources_views_fancytree_taxonomy_list();
      break;

    case 'fancytree_taxonomy_flyout_block':
      $block['subject'] = '';
      $block['content'] = sources_views_search_flyout_fancytree_taxonomy_list();
      break;

    case 'custom_taxonomy_breadcrumb':
      $block['subject'] = '';
      $block['content'] = sources_views_get_breadcrumb_dropdowns();
      break;

    case 'advanced_search_filter':
      $block['subject'] = t('Sources: Advanced Sources Search Filter');
      $block['content'] = drupal_get_form('sources_views_advanced_search_form');
      break;
  }
  return $block;
}

/**
 *
 */
function search_landing_page() {
  $query_string = explode('&', $_SERVER['QUERY_STRING']);
  if (empty($query_string[0])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 *
 */
function sources_views_custom_sort_block_content() {
  $publish_year_values = sources_views_get_min_max_year('views-custom-sort');
  $published_year = (!empty($publish_year_values)) ? $publish_year_values : sources_views_get_min_max_year('views-custom-sort', FALSE);
  $custom_sort_block_values = array('publish_year_asc' => $published_year['asc'], 'publish_year_desc' => $published_year['desc']);
  return $custom_sort_block_values;
}

/**
 *
 */
function sources_views_get_collection_link($term) {
  $class_name = (!empty($term->children)) ? 'has-children' : '';
  if (sources_views_sort_criteria_set()) {
    $sort_by = (isset($_GET['sort_by'])) ? check_plain($_GET['sort_by']) : '';
    $sort_order = (isset($_GET['sort_order'])) ? check_plain($_GET['sort_order']) : '';
    $query_values = array(
      'field_zotero_collections' => $term->tid,
      'view_mode' => 'collection',
      'sort_by' => $sort_by,
      'sort_order' => $sort_order,
    );
  }
  else {
    $query_values = array(
      'field_zotero_collections' => $term->tid,
      'view_mode' => 'collection',
    );
  }
  $item = l(t($term->name), 'sources-search', array(
    'query' => $query_values,
    'attributes' => array(
      'class' => array($class_name, 'collection-id-' . $term->tid),
    ),
  ));
  return $item;

}

/**
 *
 */
function sources_views_get_selected_collection() {
  $selected_collection = sources_views_get_page_argument('field_zotero_collections');
  return $selected_collection;
}

/**
 * Get a URL argument i.e ?field_zotero_collections=All.
 */
function sources_views_get_page_argument($key) {
  if (isset($_GET[$key]) && !empty($_GET[$key])) {
    return check_plain($_GET[$key]);
  }
  return FALSE;
}

/**
 * Get all URL arguments.
 */
function sources_views_get_page_arguments($keys) {
  $page_arguments = array();
  foreach ($keys as $key) {
    if ($page_argument = sources_views_get_page_argument($key)) {
      $page_arguments[$key] = $page_argument;
    }
  }
  return $page_arguments;
}

/**
 * Get arguments to append to the URL
 * based on currently set sort, order URL params, and collection term.
 */
function sources_views_get_sources_link_query_values($term) {
  $sort_by = isset($_GET['sort_by']) ? $_GET['sort_by'] : NULL;
  $sort_order = isset($_GET['sort_order']) ? $_GET['sort_order'] : NULL;

  $query_values = array('field_zotero_collections' => $term->tid, 'view_mode' => 'collection');

  if (sources_views_sort_criteria_set()) {
    $query_values['sort_by']    = $sort_by;
    $query_values['sort_order'] = $sort_order;
  }
  return $query_values;
}

/**
 * View all sources link for provided collection taxonomy term.
 */
function sources_views_get_all_sources_top_link($term) {
  $query_values = sources_views_get_sources_link_query_values($term);
  return l(t('View all sources for ' . $term->name), 'sources-search', array('query' => $query_values));
}

/**
 *
 */
function sources_views_get_all_sources_sub_top_link($term) {
  $query_values = sources_views_get_sources_link_query_values($term);
  return l(t($term->name), 'sources-search', array('query' => $query_values));
}

/**
 * We designate certain filters as 'searching' although they are all technically views filters
 * This allows us to display 'search results' in the UI if user enters text for
 * an author name, but *not* display 'search results' if user merely filters by publication date.
 */
function sources_views_search_criteria() {
  $criteria = array(
    'search' => array(
      'biblio_authors' => t("Biblio Author?"),
      'title' => t("Title"),
      'search_text_biblio_abstract' => t("Words in Abstract"),
      'search_api_views_fulltext' => t(""),
      'search_text_biblio_author' => t("Author"),
      'search_text_biblio_publisher' => t(""),
      'search_text_biblio_publish_place' => t(""),
      'search_text_zotero_tags' => t("Tags"),
    ),
    'filter' => array(
      'advanced_search_start_year' => t(""),
      'advanced_search_end_year' => t(""),
      'biblio_year' => t(""),
      'biblio_year_1' => t(""),
      'biblio_publication_type' => t(""),
      'biblio_publisher' => t(""),
      'biblio_place_published' => t(""),
      'field_zotero_tags' => t(""),
      'condition_option' => t(""),
      'advanced_biblio_publication_type' => t(0),

    ),
    'sort' => array(
      'sort_by' => t("Sort By"),
      'sort_order' => t("Order By"),
    ),
    'browse' => array(
      'field_zotero_collections' => t(""),
    ),
  );

  return $criteria;

}

/**
 *
 */
function sources_views_arg_type_is_set($type) {
  $criteria = sources_views_search_criteria();
  $filter_keys = array_keys($criteria[$type]);
  $args = sources_views_get_page_arguments($filter_keys);
  return !empty($args);
}

/**
 * Return true if user is searching on the Sources Search view.
 */
function sources_views_is_search() {
  return sources_views_arg_type_is_set('search');
}

/**
 * Return true if user has filtered results on the Sources Search view.
 */
function sources_views_is_filtered() {
  return sources_views_arg_type_is_set('filter');
}

/**
 * Advanced biblio search form().
 */
function sources_views_advanced_search_form($form, &$form_state) {
  $filter_options = (arg(1) == '' && sources_views_get_filter_node_ids()) ? sources_views_get_filter_node_ids() : '';
  $default_search_keyword = (!empty($_GET['search_api_views_fulltext'])) ? $_GET['search_api_views_fulltext'] : '';
  $default_condition_option = (!empty($_GET['condition_option'])) ? $_GET['condition_option'] : 'All';
  $default_publication_type = (!empty($_GET['advanced_biblio_publication_type'])) ? $_GET['advanced_biblio_publication_type'] : '';
  $default_title = (!empty($_GET['title'])) ? $_GET['title'] : '';
  $default_publication_option = (!empty($_GET['advanced_search_publication_year'])) ? $_GET['advanced_search_publication_year'] : 'range';
  $default_publication_year_start = (!empty($_GET['advanced_search_start_year'])) ? $_GET['advanced_search_start_year'] : '';
  $default_publication_year_end = (!empty($_GET['advanced_search_end_year'])) ? $_GET['advanced_search_end_year'] : '';
  $form = array();
//  $form['#attributes'] = array('class' => array('input-section')); - mark removed this Aug 20,2018 - It should not be here on the form element, was breaking the flyout layout.
  $form['advanced_search_api_views_fulltext'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'biblio/titles/list_callback',
    '#default_value' => $default_search_keyword,
    '#attributes' => array(
      'placeholder' => t('Enter Search...'),
    ),
  );
  $form['advanced_option'] = array(
    '#type' => 'fieldset',
    '#collapsed' => FALSE,
  );
  $form['advanced_option']['condition_option'] = array(
    '#type' => 'select',
    '#options' => array(
      'all' => t('All'),
      'any' => t('Any'),
    ),
    '#default_value' => $default_condition_option,
    '#prefix' => '<span>' . t('Find items that match') . '</span>',
    '#suffix' => '<span>' . t('of the fields below') . '</span>',
  );
  $form['advanced_option']['advanced_biblio_publication_type'] = array(
    '#type' => 'select',
    '#title' => t('Source Type'),
    '#options' => array(),
    '#default_value' => $default_publication_type,
    '#pre_render' => array('sources_views_advanced_search_advanced_biblio_publication_type_pre_render'),
    '#validated' => TRUE,
  );
  $form['advanced_option']['advanced_search_publication_year'] = array(
    '#type' => 'radios',
    '#title' => '<span class="publication-label-text">' . t('Year of Publication') . '</span>[ <span class="publication-year-start"></span>-<span class="publication-year-end"></span> ]',
    '#options' => array(
      'range' => t('Range'),
      date('Y') => t('Current'),
      date('Y', strtotime('-1 year')) => t('Past year'),
    ),
    '#default_value' => $default_publication_option,
  );
  #$form['advanced_option']['advanced_search_publication_year_slider'] = array(
  #  '#markup' => '<div id="date-range-slider-dropdown-container"><div id="date-range-slider-dropdown"></div></div>',
  #);

  $form['advanced_option']['advanced_search_start_year'] = array(
    '#type' => 'textfield',
    '#default_value' => $default_publication_year_start,
    '#attributes' => array(
        ' type' => 'number',
        'maxlength' => 4,
    ),
    '#maxlength' => 4,
  );
  $form['advanced_option']['advanced_search_end_year'] = array(
    '#type' => 'textfield',
    '#default_value' => $default_publication_year_end,
    '#attributes' => array(
      ' type' => 'number',
    ),
    '#maxlength' => 4,
  );

  $form['advanced_option']['title'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'biblio/plain_titles/list_callback',
    '#title' => t('Title'),
    '#attributes' => array('class' => array('form-control')),
    '#default_value' => $default_title,
  );
  $form['advanced_option']['search_text_biblio_author'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'biblio/authors/list_callback',
    '#title' => t('Author'),
    '#attributes' => array('class' => array('form-control')),
    '#default_value' => _sources_views_get_get_variable('search_text_biblio_author'),
  );
  $form['advanced_option']['search_text_biblio_publisher'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'biblio/publishers/list_callback',
    '#title' => t('Publisher'),
    '#attributes' => array('class' => array('form-control')),
    '#default_value' => _sources_views_get_get_variable('search_text_biblio_publisher'),
  );
  $form['advanced_option']['search_text_biblio_publish_place'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'biblio/place_published/list_callback',
    '#title' => t('Place of Publication'),
    '#attributes' => array('class' => array('form-control')),
    '#default_value' => _sources_views_get_get_variable('search_text_biblio_publish_place'),
  );
  $form['advanced_option']['search_text_biblio_abstract'] = array(
    '#type' => 'textfield',
    '#title' => t('Words in Abstract'),
    '#attributes' => array('class' => array('form-control')),
    '#default_value' => _sources_views_get_get_variable('search_text_biblio_abstract'),
  );
  $form['advanced_option']['search_text_zotero_tags'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'biblio/tags/list_callback',
    '#title' => t('Tags'),
    '#attributes' => array('class' => array('form-control')),
    '#default_value' => _sources_views_get_get_variable('search_text_zotero_tags'),
  );
  $form['advanced_option']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#submit' => array('sources_views_advanced_search_form_submit'),
  );
  $form['advanced_option']['clear'] = array(
    '#type' => 'submit',
    '#value' => t('Clear'),
  );
  $form['default_min_max_publication_year'] = array(
    '#markup' => sources_views_get_min_max_year('views-attach', FALSE),
  );
  return $form;
}

/**
 *
 */
function _sources_views_get_get_variable($varname) {
  return (isset($_GET[$varname])) ? $_GET[$varname] : '';
}

/**
 *
 */
function sources_views_views_pre_execute(&$view) {
  // For whatever reason adding boosts to the Solr search (qf parameter in Solr language) causes the
  // search to return no results in some cases. This happens even when the boosts are all set to 1,
  // which Search API Solr does automatically for all fulltext fields. Passing this 'skip_boosts' flag
  // through to hook sources_views_search_api_solr_query_alter will bypass this.
  if ($view->name == 'biblio_search_api') {
    $skip_boosts = &sources_views_search_modifications('skip_boosts');
    $skip_boosts = TRUE;
  }

  if (strpos(current_path(), 'sources-search/biblio/') === 0) {
    if ($view->name == 'biblio_search_api' && $view->current_display == 'biblio_full') {
      if (!empty($view->args[0]) && ($node = node_load($view->args[0]))) {
        list($id, , $bundle) = entity_extract_ids('node', $node);
        $path = drupal_get_path_alias('node/' . $node->nid);
        drupal_goto($path);
      }
    }
  }
}

function sources_views_page_alter(&$page) {
    $cp = current_path();
    $nid = FALSE;
    if (preg_match('/sources-search\/biblio\/(\d+)/', $cp, $matches)) {
        if (!empty($matches[1])) {
            $nid = $matches[1];
        }
    } else if (strstr($cp, 'sources-search/biblio') && !empty($_GET['current_nid'])) {
        $nid = $_GET['current_nid'];
    }
    if ($nid) {
        $path = drupal_get_path_alias('node/' . $nid);
        drupal_goto($path);
    }
}

/**
 * Redirects to biblio result page with the necessary query strings for filter.
 */
function sources_views_advanced_search_form_submit($form, &$form_state) {
  $biblio_authors = (!empty($_GET['biblio_authors'])) ? $_GET['biblio_authors'] : '';
  $biblio_publisher = (!empty($_GET['biblio_publisher'])) ? $_GET['biblio_publisher'] : '';
  $biblio_place_published = (!empty($_GET['biblio_place_published'])) ? $_GET['biblio_place_published'] : '';
  $query_params = array(
    'field_zotero_collections' => 'All',
    'sort_by' => 'sort_stripped_node_title',
    'sort_order' => 'ASC',
    'biblio_publication_type' => $form_state['values']['advanced_biblio_publication_type'],
    'biblio_authors' => $biblio_authors,
    'biblio_publisher' => $biblio_publisher,
    'biblio_place_published' => $biblio_place_published,
    'biblio_year' => $form_state['values']['advanced_search_start_year'],
    'biblio_year_1' => $form_state['values']['advanced_search_end_year'],
    'search_api_views_fulltext' => $form_state['values']['advanced_search_api_views_fulltext'],
    'condition_option' => $form_state['values']['condition_option'],
    'advanced_biblio_publication_type' => $form_state['values']['advanced_biblio_publication_type'],
    'title' => $form_state['values']['title'],
    'search_text_biblio_author' => $form_state['values']['search_text_biblio_author'],
    'search_text_biblio_publisher' => $form_state['values']['search_text_biblio_publisher'] ,
    'search_text_biblio_publish_place' => $form_state['values']['search_text_biblio_publish_place'],
    'search_text_biblio_abstract' => $form_state['values']['search_text_biblio_abstract'],
    'search_text_zotero_tags' => $form_state['values']['search_text_zotero_tags'],
    'advanced_search_publication_year' => $form_state['values']['advanced_search_publication_year'],
    'advanced_search_start_year' => $form_state['values']['advanced_search_start_year'],
    'advanced_search_end_year' => $form_state['values']['advanced_search_end_year'],
  );

  $publication_years = _sources_views_get_publication_years();
  $yrange = array(
    'min' => min($publication_years),
    'max' => max($publication_years),
  );
  if ($query_params['advanced_search_start_year'] == $yrange['min'] && $query_params['advanced_search_end_year'] == $yrange['max']) {
    unset($query_params['advanced_search_start_year']);
    unset($query_params['advanced_search_end_year']);
    unset($query_params['biblio_year']);
    unset($query_params['biblio_year_1']);
  }

  // Remove blank values from the URL.
  foreach ($query_params as $key => $value) {
    if ($value === '') {
      unset($query_params[$key]);
    }
    // Use 0 value as an explicit NULL for publication type.
    if ($value == 0 && (strpos($key, 'biblio_publication_type') !== FALSE)) {
      unset($query_params[$key]);
    }
  }
  drupal_goto('sources-search', array('query' => $query_params));
}

/**
 * Implements hook_views_pre_render().
 */
function sources_views_views_pre_render(&$view) {
  if ($view->name == 'biblio_search_api' && (!empty($view->exposed_input) && !empty($view->result)) || $view->current_display == 'allpage') {
    $first_row = ($view->query->pager->current_page != 0) ? ($view->query->pager->current_page * $view->query->pager->options['items_per_page']) + 1 : 1;
    $last_row = ($first_row + count($view->result)) - 1;
    $max_page = ceil($view->query->pager->total_items / $view->query->pager->options['items_per_page']);
    $next_page_link = ($view->query->pager->current_page != ($max_page - 1)) ? sources_views_custom_pager_links($view, 'pager-next', $view->query->pager->current_page + 1) : '';
    $prev_page_link = ($view->query->pager->current_page != 0) ? sources_views_custom_pager_links($view, 'pager-previous', $view->query->pager->current_page - 1) : '';
    $current_page = $view->query->pager->current_page + 1;
    $first_page_link = ($view->query->pager->current_page != 0) ? sources_views_custom_pager_links($view, 'pager-first', 0) : '';
    $last_page_link = ($view->query->pager->current_page != ($max_page - 1)) ? sources_views_custom_pager_links($view, 'pager-last', $max_page - 1) : '';
    $current_row_list = ($view->current_display != 'biblio_full') ? $first_row . ' - ' . $last_row : $first_row;
    if ($first_row < 1) {
      $current_row_list = '0';
    }
    $attachment_values = array(
      'current_row_list' => $current_row_list,
      'total_items' => $view->query->pager->total_items,
      'first_page_link' => $first_page_link,
      'prev_page_link' => $prev_page_link,
      'current_page' => $current_page,
      'max_page' => $max_page,
      'next_page_link' => $next_page_link,
      'last_page_link' => $last_page_link,
      'min_max_year' => sources_views_get_min_max_year('views-attach'),
    );
    /*  ndg8f: Adding pager through Shanti Pager Module and view
    $view->attachment_before = theme('sources_views_custom_pager_top', array('value' => $attachment_values));
    $view->attachment_after = theme('sources_views_custom_pager_bottom', array('value' => $attachment_values));
    */
  }
}

/**
 * Implements hook_preprocess_page().
 */
function sources_views_preprocess_page(&$vars) {
  drupal_add_js(drupal_get_path('module', 'sources_views') . '/js/sources_views.js');
  drupal_add_js(drupal_get_path('module', 'sources_views') . '/js/sourcesViewsAutocomplete.js');
  // drupal_add_js(drupal_get_path('module', 'sources_views') . '/js/sourcesViewsCustomSort.js');.
  drupal_add_js(drupal_get_path('module', 'sources_views') . '/js/sourcesViewsSearchFlyout.js');
  drupal_add_js(drupal_get_path('module', 'sources_views') . '/js/sourcesViewsCustomPagerSort.js');
  drupal_add_js(drupal_get_path('module', 'sources_views') . '/js/sourcesViewsBreadcrumb.js');
  drupal_add_js(drupal_get_path('module', 'sources_views') . '/js/sourcesViewsSlider.js');
  drupal_add_library('jquery_plugin', 'validate');

  sources_views_set_page_title();
}

/**
 *
 */
function sources_views_set_page_title() {
  $current_nid = isset($_GET['current_nid']) ? $_GET['current_nid'] : FALSE;
  $field_zotero_tags = isset($_GET['field_zotero_tags']) ? $_GET['field_zotero_tags'] : FALSE;
  $field_zotero_coll = isset($_GET['field_zotero_collections']) ? $_GET['field_zotero_collections'] : FALSE;
  if ($current_nid) {
    $current_node = node_load($current_nid);
    $title = $current_node->title;
  }
  elseif (sources_views_is_search()) {
    $title = sources_views_get_search_page_title();
  }
  elseif ($field_zotero_tags) {
    $term = taxonomy_term_load($field_zotero_tags);
    $title = $term->name;
  }
  elseif ($field_zotero_coll && $field_zotero_coll != 'All') {
    $term = taxonomy_term_load($field_zotero_coll);
    $title = $term->name;
  }
  if (isset($title)) {
    drupal_set_title($title);
  }
}

/**
 *
 */
function sources_views_get_search_page_title() {
  $criteria = sources_views_search_criteria();
  $search_args = $criteria['search'] + $criteria['filter'];
  $search_values = sources_views_get_page_arguments(array_keys($search_args));

  $title = 'Search Results: ';
  if (isset($search_values['search_api_views_fulltext'])) {
    $title .= '“' . $search_values['search_api_views_fulltext'] . '”, ';
  }
  if (isset($search_values['title'])) {
    $title .= 'title: ' . $search_values['title'] . ', ';
  }
  if (isset($search_values['field_zotero_collections'])) {
    $title .= 'tagged with ' . $search_values['field_zotero_collections'] . ', ';
  }
  if (isset($search_values['search_text_zotero_tags'])) {
    $title .= 'tagged with ' . $search_values['search_text_zotero_tags'] . ', ';
  }
  if (isset($search_values['advanced_biblio_publication_type'])) {
    $publication_type = &drupal_static('sources_views_biblio_publication_type')[$search_values['advanced_biblio_publication_type']];
    $title .= $publication_type . ', ';
  }
  if (isset($search_values['search_text_biblio_abstract'])) {
    $title .= 'abstract: ' . $search_values['search_text_biblio_abstract'] . ', ';
  }
  if (isset($search_values['search_text_biblio_author'])) {
    $title .= 'author: ' . $search_values['search_text_biblio_author'] . ', ';
  }
  if (isset($search_values['search_text_biblio_publisher'])) {
    $title .= 'publisher: ' . $search_values['search_text_biblio_publisher'] . ', ';
  }
  if (isset($search_values['search_text_biblio_publish_place'])) {
    $title .= $search_values['search_text_biblio_publish_place'] . ', ';
  }
  if (isset($search_values['biblio_year'])) {
    $title .= $search_values['biblio_year'] . ' - ' . $search_values['biblio_year_1'] . ', ';
  }

  $title = trim(str_replace(', , ', ', ', $title));
  $title = substr($title, 0, -1);
  return $title;
}

/**
 * Returns custom pager link.
 */
function sources_views_custom_pager_links($view, $class, $pager_link) {
  $query_strings = array();
  foreach ($view->exposed_input as $key => $value) {
    $query_strings[$key] = $value;
  }
  $pager = array('page' => $pager_link);
  array_push($query_strings, $pager);
  $link = l('<span class="icon"></span>', current_path(), array('query' => $query_strings, 'attributes' => array('class' => array($class)), 'html' => TRUE));
  return $link;
}

/**
 * Returns node ids for option filter.
 */
function sources_views_get_filter_node_ids() {
  $filter_ids = views_get_current_view();
  if (!empty($filter_ids->result)) {
    $node_ids = array();
    foreach ($filter_ids->result as $node_val) {
      $node_ids[] = $node_val->entity;
    }
    return $node_ids;
  }
  else {
    return FALSE;
  }
}

/**
 *
 */
function sources_views_get_node_id_query($query) {
  $node_ids = array();
  foreach ($query as $data) {
    $node_ids[] = $data->item_id;
  }
  return $node_ids;
}

// This group of functions was deleted in commit: 125fe1722ded0b376141db539307de8d66a13a2a.
/**
 * Returns indexed authors.
 */
// Function sources_views_indexed_author($filter_ids) {.
/**
 * Returns indexed publishers.
 */
// Function sources_views_indexed_publisher($filter_ids) {.
/**
 * Returns indexed publish location.
 */
// Function sources_views_indexed_location($filter_ids) {.
/**
 * Returns zotero tags.
 */
// Function sources_views_zotero_tags($filter_ids) {;.
/**
 * Returns min/max publication year.
 */
function sources_views_get_min_max_year($return_option, $filtered = TRUE) {
  $publication_years = _sources_views_get_publication_years();
  return sources_views_year_output($publication_years, $filtered, $return_option);
}

/**
 * Returns min/max publication year output.
 */
function sources_views_year_output($publication_years, $filtered, $return_option) {
  if (!empty($publication_years)) {
    $publication_years = array_filter($publication_years, function ($year) {
      return is_numeric($year);
    });
    $latest_year = max($publication_years);
    if ($latest_year > CURRYEAR) {
      $latest_year = CURRYEAR;
    }
    $earliest_year = min($publication_years);
    switch ($return_option) {
      case 'views-attach':
        if ($filtered) {
          $output = '<input type="hidden" id="latest-published-year" value="' . $latest_year . '" />';
          $output .= '<input type="hidden" id="earliest-published-year" value="' . $earliest_year . '" />';
        }
        else {
          $output = '<input type="hidden" id="unfiltered-latest-published-year" value="' . $latest_year . '" />';
          $output .= '<input type="hidden" id="unfiltered-earliest-published-year" value="' . $earliest_year . '" />';
        }
        break;

      case 'views-custom-sort':
        $output = array('asc' => $earliest_year . ' - ' . $latest_year, 'desc' => $latest_year . ' - ' . $earliest_year);
        break;
    }
  }
  else {
    $output = NULL;
  }
  return $output;
}

/**
 * Implements hook_views_pre_build().
 */
function sources_views_views_pre_build(&$view) {
  if ($view->name == 'biblio_search_api' && !empty($_GET['condition_option'])) {
    if ($_GET['condition_option'] == 'any') {
      $view->display_handler->options['filter_groups']['groups'][1] = 'OR';
    }
  }
}

/**
 * Returns views result values.
 */
function sources_views_get_views_results($views_id, $display_id) {
  $get_view = views_get_view($views_id);
  $get_view->set_display($display_id);
  $get_view->set_items_per_page(0);
  $get_view->pre_execute();
  $get_view->execute();
  return $get_view->result;
}

/**
 * Implements hook_theme().
 */
function sources_views_theme($existing, $type, $theme, $path) {
  $template_path = drupal_get_path('module', 'sources_views') . '/templates';
  return array(
    'sources_views_custom_sort_field' => array(
      'template' => 'sources_views_custom_sort_field',
      'path' => $template_path,
    ),
    'sources_views_custom_pager_top' => array(
      'template' => 'sources_views_custom_pager_top',
      'path' => $template_path,
    ),
    'sources_views_custom_pager_bottom' => array(
      'template' => 'sources_views_custom_pager_bottom',
      'path' => $template_path,
    ),
    'sources_views_breadcrumb' => array(
      'template' => 'sources_views_breadcrumb',
      'path' => $template_path,
    ),
    'sources_views_breadcrumbs' => array(
      'function' => 'sources_views_theme_breadcrumbs',
    ),
    'sources_views_all_sources_dropdown' => array(
      'template' => 'sources_views_all_sources_dropdown',
      'path' => $template_path,
    ),
    'sources_views_breadcrumb_dropdown' => array(
      'template' => 'sources_views_breadcrumb_dropdown',
      'path' => $template_path,
    ),
    'sources_item_list' => array(
      'template' => 'sources_item_list',
      'path' => $template_path,
    ),
    'sources_custom_option_list' => array(
      'template' => 'sources_custom_option_list',
      'path' => $template_path,
    ),
    'sources_fancytree_taxonomy' => array(
      'template' => 'sources_fancytree_taxonomy',
      'path' => $template_path,
    ),
    'field_advanced_search_api_prefix_wrapper' => array(
      'template' => 'field_advanced_search_api_prefix_wrapper',
      'path' => $template_path,
    ),
    'field_advanced_search_api_suffix_wrapper' => array(
      'template' => 'field_advanced_search_api_suffix_wrapper',
      'path' => $template_path,
    ),
    'sources_views_advanced_search_form' => array(
      'render element' => 'form',
      'template' => 'sources_views_advanced_search_form',
      'path' => $template_path,
    ),
  );
}

/**
 * Returns TRUE if sort criteria has been set.
 */
function sources_views_sort_criteria_set() {
  $status = (!empty($_GET['sort_by']) && !empty($_GET['sort_order'])) ? TRUE : FALSE;
  return $status;
}

/**
 *
 */
function sources_views_get_collection_vocabulary_id() {
  $collection_vocabulary = taxonomy_vocabulary_machine_name_load('collections');
  $vocabulary_id = $collection_vocabulary->vid;
  return $vocabulary_id;
}

/**
 * Implements Search API Alter Callback.
 */
function sources_views_search_api_alter_callback_info() {
  $callbacks['sources_search_access_filter'] = array(
    'name' => t('Filters sources based on access'),
    'description' => t('Filters out private or group-private sources'),
    'class' => 'SourcesSearchAccessFilter',
    'weight' => 100,
  );
  return $callbacks;
}

/**
 * Implements hook form_alter
 */
function sources_views_form_biblio_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['biblio_next'])) {
    $form['biblio_next']['#attributes'] = array(
      'class' => array('element-invisible'),
    );
  }
  foreach($form as $key => $item) {
    if (strpos($key, 'zotero') !== FALSE) {
      unset($form[$key]);
    }
  }

  $edit_form = (preg_match('/\/edit$/', $form['action']) === 1);
  $has_selected_publication_type = (!empty($form_state['input']) && (!empty($form_state['input']) && $form_state['input']['biblio_type'] != 0)) || ($form['biblio_type']['#default_value'] != 0);
  if (!$edit_form && !$has_selected_publication_type) {
    unset($form['field_biblio_long_title']);
    unset($form['field_biblio_long_language']);
    unset($form['field_biblio_language']);
  } else {
    $biblio_year_tab = array();
    foreach ($form['biblio_tabs'] as $index => $tab) {
      if (isset($tab['biblio_year'])) {
        $biblio_year_tab = &$form['biblio_tabs'][$index];
        break;
      }
    }
    $biblio_year = $biblio_year_tab['biblio_year'];
    unset($biblio_year_tab['biblio_year']);
    $title = $form['title'];
    unset($form['title']);
    $required_fields = array(
      '#type' =>  'fieldset',
      '#group' => 'biblio_tabs',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#title' => 'Required Source Info',
      '#weight' => 0
    );
    $required_fields['title'] = $title;
    $required_fields['title']['#weight'] = 1;
    $required_fields['biblio_year'] = $biblio_year;
    $required_fields['biblio_year']['#weight'] = 2;
    $required_fields['biblio_year']['#required'] = TRUE;
    array_push($form['biblio_tabs'], $required_fields);

    $biblio_alt_titles_tab = array();
    foreach ($form['biblio_tabs'] as $index => $tab) {
      if (isset($tab['biblio_short_title'])) {
        $biblio_alt_titles_tab = &$form['biblio_tabs'][$index];
        break;
      }
    }
    $long_title = $form['field_biblio_long_title'];
    unset($form['field_biblio_long_title']);
    $biblio_alt_titles_tab['field_biblio_long_title'] = $long_title;
    $long_lang = $form['field_biblio_long_language'];
    unset($form['field_biblio_long_language']);
    $biblio_alt_titles_tab['field_biblio_long_language'] = $long_lang;

    foreach ($form['biblio_tabs'] as $index => $tab) {
      if (isset($tab['biblio_keywords'])) {
        hide($form['biblio_tabs'][$index]);
        break;
      }
    }
  }
}
