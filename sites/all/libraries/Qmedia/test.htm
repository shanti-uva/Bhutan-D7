<html>
<head>
 	<script src="//ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>	
	<script type="text/javascript" src="https://apis.google.com/js/client.js"></script>
<body>
	<input type="text" id="myName" />
	<input type="button" onClick='test()' value="Save" /> <input type="button" onClick='test(1)' value="Update" /><br><br>
	<input type="button" onClick='test2()' value="View" /> <input type="button" onClick='test3()' value="Get" />


</body>
<script>    

	gd=new Gdrive();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GOOGLE DRIVE ACCESS 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function Gdrive()															// CONSTRUCTOR
{
	this.clientId="81792849751-1c76v0vunqu0ev9fgqsfgg9t2sehcvn2.apps.googleusercontent.com";
	this.scope="https://www.googleapis.com/auth/drive";
	this.contentType = 'image/svg+xml';
	this.lastId="";
}

Gdrive.prototype.AccessAPI=function(apiCall, callback)						// CHECK FOR AUTHORIZATION and ACCESS API
{
	gapi.auth.authorize(														// Get logged-in status
		{"client_id": gd.clientId, "scope": gd.scope, 							// Client info
		"immediate": true},handleAuthResult										// Immediate
		);
		
	function handleAuthResult(authResult) {										// ON GDRIVE RESPONSE
        if (authResult && !authResult.error)  									// If logged in
	 		gapi.client.load('drive', 'v2', function() {						// Load API
 	 			apiCall(callback);												// Run API callback
	 		});
	 	else																	// Not logged in
			gapi.auth.authorize(												// Ask for auth
				{"client_id": gd.clientId, "scope": gd.scope, 					// Client info
				"immediate": false},handleAuthResult							// Force looking for auth
				);
		}
 }

Gdrive.prototype.Download=function(id, callback)							// DOWNLOAD DATA FROM G-DRIVE
{
	var request = gapi.client.drive.files.get({ 'fileId': id });				// Request file
	request.execute(function(resp) {											// Get data
		if (resp.downloadUrl) {													// If a link
		    var accessToken=gapi.auth.getToken().access_token;					// Get access token
		    var xhr=new XMLHttpRequest();										// Ajax
		    xhr.open('GET',resp.downloadUrl);									// Set open url
		    xhr.setRequestHeader('Authorization', 'Bearer ' + accessToken);		// Set header
		    xhr.onload = function()  {  callback(xhr.responseText);   };		// On load
		    xhr.send();															// Do it
		  	}
		});
}

Gdrive.prototype.Upload=function(name, data, id, callback)					// UPLOAD DATA TO G-DRIVE
{
	const boundary = '-------314159265358979323846264';							// Bounds	
    const delimiter = "\r\n--" + boundary + "\r\n";								// Opener
    const close_delim = "\r\n--" + boundary + "--";								// Closer
	var metadata={ 'title': name, 'mimeType': this.contentType };				// Set metadata
	var base64Data=btoa(data); 													// Encode to base-64 Stringify if JSON
	var _this=this;																// Save context
	id=id ? "/"+id : "";														// Add id if set
   trace(id)
    var multipartRequestBody =													// Multipart request
        delimiter +
        'Content-Type: application/json\r\n\r\n' +
        JSON.stringify(metadata) +
        delimiter +
        'Content-Type: ' + this.contentType + '\r\n' +							// Set content type
        'Content-Transfer-Encoding: base64\r\n' +								// Base 64
        '\r\n' +
        base64Data +															// Add metadate
        close_delim;															// Closer
    var request = gapi.client.request({											// Create request
        'path': '/upload/drive/v2/files'+id,									// Service
        'method': id ? 'PUT' : 'POST',											// Method based on update or create mode
   		'params': id ? {'uploadType': 'multipart', 'alt': 'json'} : {'uploadType': 'multipart'},
        'headers': {'Content-Type': 'multipart/mixed; boundary="' + boundary + '"'},
        'body': multipartRequestBody});
  
   request.execute(function(arg) {												// Run request
       	_this.lastId=arg.id;													// Save last id set
      	callback(arg);															// Run callback
    	});
}

Gdrive.prototype.Picker=function(allFilea, callback)						// RUN G-DRIVE PICKER
{
	var _this=this;																// Save context
	LoadGoogleDrive(true, function(s) {
		callback(s.url);
		});
	
 	function LoadGoogleDrive(allFiles, callback)								// LOAD PICKER FOR GOOGLE DRIVE
	{
	  	var pickerApiLoaded=false;
		var oauthToken;
		var key="AIzaSyAVjuoRt0060MnK_5_C-xenBkgUaxVBEug";
		var id="81792849751-1c76v0vunqu0ev9fgqsfgg9t2sehcvn2.apps.googleusercontent.com";
		gapi.load('auth', { 'callback': function() {
				window.gapi.auth.authorize( {
	              	'client_id': id,
	             	'scope': ['https://www.googleapis.com/auth/drive'],
	              	'immediate': false }, function(authResult) {
							if (authResult && !authResult.error) {
	          					oauthToken=authResult.access_token;
	          					createPicker();
	          					}
	          				});
				}
			});
		
		gapi.load('picker', {'callback': function() {
				pickerApiLoaded=true;
		        createPicker();
	    	   	}
			});
	
		function createPicker() {
	        if (pickerApiLoaded && oauthToken) {
	           	var view=new google.picker.DocsView().
	           		setOwnedByMe(allFiles).
					setIncludeFolders(true);
	          	var picker=new google.picker.PickerBuilder().
	          		addView(view).
					setOAuthToken(oauthToken).
					setDeveloperKey(key).
					setCallback(pickerCallback).
					setSelectableMimeTypes(_this.contentType).
					build();
				picker.setVisible(true);
	       		}
	    	}
	
		function pickerCallback(data) {
	        if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {
         		var doc=data[google.picker.Response.DOCUMENTS][0];
	      		_this.lastId=doc.id;
	      		callback(doc)
	       		}
			}
	   
	}	// End closure
}


function test(update) {
	var data='<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><circle r="32" cx="35" cy="65" fill="#F00" opacity="0.5"/><circle r="32" cx="65" cy="65" fill="#0F0" opacity="0.5"/><circle r="32" cx="50" cy="35" fill="#00F" opacity="0.5"/></svg>'
	gd.AccessAPI(function() { gd.Upload($("#myName").val(),data,update ? gd.lastId : null,function(res) { trace(res); }); });
	}

function test2() {
	gd.AccessAPI(function() { gd.Picker(false,function(res) { trace(res); }); });
	}

function test3() {
	gd.AccessAPI(function() { gd.Download(gd.lastId,function(res) { trace(res); }); });
	}


	function trace(msg, p1, p2, p3, p4)										// CONSOLE 
	{
		if (p4 != undefined)
			console.log(msg,p1,p2,p3,p4);
		else if (p3 != undefined)
			console.log(msg,p1,p2,p3);
		else if (p2 != undefined)
			console.log(msg,p1,p2);
		else if (p1 != undefined)
			console.log(msg,p1);
		else
			console.log(msg);
}

</script>
</head></html>

